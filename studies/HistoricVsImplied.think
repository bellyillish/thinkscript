declare lower;


### SCRIPTS ###
    script Date {
        def yyyymmdd = GetYYYYMMDD();
        def yyyy     = GetYear();
        def mm       = GetMonth();
        def doy      = GetDay();
        def dom      = GetDayOfMonth(yyyymmdd);
        def dow      = GetDayOfWeek(yyyymmdd);
        def dowj1    = GetDayOfWeek(yyyy * 10000 + 0101);
        def ww       = GetWeek();
        def q        = Ceil(mm / 3);
        def yyyyq    = yyyy * 10 + q;
        def yyyymm   = yyyy * 100 + mm;

        def minus = if yyyy > yyyy[1] and ww >= ww[1] then 1
            else if ww != ww[1] then 0
            else minus[1];

        def yyyyww = (yyyy - minus) * 100 + ww;

        def isAfterOpex    = (dom - 14 - if dow > 5 then dow - 5 else dow + 2) > 0;
        def isEndOfQuarter = mm % 3 == 0;

        def qOpex = if q + isAfterOpex * isEndOfQuarter <= 4
            then q + isAfterOpex * isEndOfQuarter
            else 1;

        def mmOpex = if mm + isAfterOpex <= 12
            then mm + isAfterOpex
            else 1;

        def yyyyOpex = if mm + isAfterOpex <= 12
            then yyyy
            else yyyy + 1;

        def yyyyqOpex  = yyyyOpex * 10  + qOpex;
        def yyyymmOpex = yyyyOpex * 100 + mmOpex;

        plot P = yyyymmdd;
        P.hide();
    }

    script Chart {
        input Validator = "$DJI";

        def aggregation   = GetAggregationPeriod();
        def isIntraday    = aggregation <  AggregationPeriod.DAY;
        def isDaily       = aggregation == AggregationPeriod.DAY;
        def isMultiDay    = aggregation >  AggregationPeriod.DAY;
        def isIntradayBar = isIntraday and Date() == Date()[1];
        def number        = BarNumber();
        def startBar      = First(number);
        def endBar        = HighestAll(number * !IsNaN(close(Validator)));
        def isValidBar    = number between startBar and endBar;
        def startOffset   = number - startBar;
        def endOffset     = number - endBar;
        def isStart       = number == startBar;
        def isEnd         = number == endBar;

        plot P = Double.NaN;
        P.hide();
    }

    script Value {
        input raw    = 0;
        input minRaw = 0;
        input maxRaw = 0;

        def minValue = if minRaw < 0 then minRaw else -999999999999999;
        def maxValue = if maxRaw > 0 then maxRaw else  999999999999999;

        def isValid;
        if IsNaN(raw) or IsInfinite(raw) {
            isValid = no;
        }
        else {
            isValid = raw between minValue and maxValue;
        }

        def value = if isValid or !Chart().isValidBar
            then raw
            else value[1];

        plot P = Double.NaN;
        P.hide();
    }

    script Periods {
        input period  = "Chart";
        input since   = 20250407;
        input candles = 100;

        def isStart     = Chart().isStart;
        def endBar      = Chart().endBar;
        def aggregation = GetAggregationPeriod();

        def isNew;
        if period == "Daily" and aggregation <= AggregationPeriod.FOUR_HOURS {
            isNew = isStart or Date() != Date()[1];
        }
        else if period == "Weekly" and aggregation <= AggregationPeriod.TWO_DAYS {
            isNew = isStart or Date().yyyyww != Date().yyyyww[1];
        }
        else if period == "Monthly" and aggregation <= AggregationPeriod.WEEK {
            isNew = isStart or Date().yyyymm != Date().yyyymm[1];
        }
        else if period == "MonthlyOPEX" and aggregation <= AggregationPeriod.WEEK {
            isNew = isStart or Date().yyyymmOpex != Date().yyyymmOpex[1];
        }
        else if period == "Quarterly" and aggregation <= AggregationPeriod.MONTH {
            isNew = isStart or Date().yyyyq != Date().yyyyq[1];
        }
        else if period == "QuarterlyOPEX" and aggregation <= AggregationPeriod.MONTH{
            isNew = isStart or Date().yyyyqOpex != Date().yyyyqOpex[1];
        }
        else if period == "Yearly" and aggregation <= AggregationPeriod.QUARTER {
            isNew = isStart or Date().yyyy != Date().yyyy[1];
        }
        else if period == "SinceDate" {
            isNew = Date() >= since and (Date()[1] < since or isStart);
        }
        else if period == "CandlesAgo" {
            isNew = isStart and candles > endBar or BarNumber() + candles == endBar;
        }
        else {
            isNew = isStart;
        }

        def isActive = isNew or isActive[1];

        plot P = isNew;
        P.hide();
    }
###


### INPUTS ###
    input Display = {
        default "Overlay",
        "Ratio"
    };

    input Length      = 20;
    input Oscillation = 0;
    input Smoothing   = 0;
###


### LOOKUPS ###
    def rawVI = imp_volatility();
    def rawVH = HistoricalVolatility(Length);
###


### CALCULATIONS ###
    def rawRatio = Log(rawVI / rawVH);

    # Oscillation
    def oscVI;
    def oscVH;
    def oscRatio;
    if Oscillation > 1 {
        oscVI    = rawVI    - Average(rawVI, Oscillation);
        oscVH    = rawVH    - Average(rawVH, Oscillation);
        oscRatio = rawRatio - Average(rawRatio, Oscillation);
    }
    else {
        oscVI    = rawVI;
        oscVH    = rawVH;
        oscRatio = rawRatio;
    }

    # Smoothing
    def vi;
    def vh;
    def ratio;
    if Smoothing > 1 {
        vi    = Inertia(oscVI, Smoothing);
        vh    = Inertia(oscVH, Smoothing);
        ratio = Inertia(oscRatio, Smoothing);
    }
    else {
        vi    = oscVI;
        vh    = oscVH;
        ratio = oscRatio;
    }
###


### PLOTS ###
    DefineGlobalColor("Line", CreateColor(48, 48, 48));

    # Implied
    plot I = vi;
    I.SetHiding(Display != Display.Overlay);
    I.DefineColor("Value", Color.UPTICK);
    I.SetDefaultColor(I.Color("Value"));

    # Historical
    plot H = vh;
    H.SetHiding(Display != Display.Overlay);
    H.DefineColor("Value", Color.DOWNTICK);
    H.SetDefaultColor(H.Color("Value"));

    # Ratio
    plot R = ratio;
    R.SetHiding(Display != Display.Ratio);
    R.DefineColor("Neutral", Color.DARK_GRAY);
    R.SetDefaultColor(R.Color("Neutral"));
    R.AssignValueColor(
        if ratio > 0
            then I.Color("Value")
        else if ratio < 0
            then H.Color("Value")
            else R.Color("Neutral")
    );

    # Mid
    plot Mid = 0;
    Mid.SetHiding(Display != Display.Ratio);
    Mid.SetDefaultColor(GlobalColor("Line"));
    Mid.HideBubble();
    Mid.HideTitle();
###
