declare upper;


### SCRIPTS ###
    script Date {
        def yyyymmdd = GetYYYYMMDD();
        def yyyy     = GetYear();
        def mm       = GetMonth();
        def doy      = GetDay();
        def dom      = GetDayOfMonth(yyyymmdd);
        def dow      = GetDayOfWeek(yyyymmdd);
        def dowj1    = GetDayOfWeek(yyyy * 10000 + 0101);
        def ww       = GetWeek();
        def q        = Ceil(mm / 3);
        def yyyyq    = yyyy * 10 + q;
        def yyyymm   = yyyy * 100 + mm;

        def minus = if yyyy > yyyy[1] and ww >= ww[1] then 1
            else if ww != ww[1] then 0
            else minus[1];

        def yyyyww = (yyyy - minus) * 100 + ww;

        def isAfterOpex    = (dom - 14 - if dow > 5 then dow - 5 else dow + 2) > 0;
        def isEndOfQuarter = mm % 3 == 0;

        def qOpex = if q + isAfterOpex * isEndOfQuarter <= 4
            then q + isAfterOpex * isEndOfQuarter
            else 1;

        def mmOpex = if mm + isAfterOpex <= 12
            then mm + isAfterOpex
            else 1;

        def yyyyOpex = if mm + isAfterOpex <= 12
            then yyyy
            else yyyy + 1;

        def yyyyqOpex  = yyyyOpex * 10  + qOpex;
        def yyyymmOpex = yyyyOpex * 100 + mmOpex;

        plot P = yyyymmdd;
        P.hide();
    }

    script Chart {
        input Validator = "$DJI";

        def aggregation   = GetAggregationPeriod();
        def isIntraday    = aggregation <  AggregationPeriod.DAY;
        def isDaily       = aggregation == AggregationPeriod.DAY;
        def isMultiDay    = aggregation >  AggregationPeriod.DAY;
        def isIntradayBar = isIntraday and Date() == Date()[1];
        def number        = BarNumber();
        def startBar      = First(number);
        def endBar        = HighestAll(number * !IsNaN(close(Validator)));
        def isValidBar    = number between startBar and endBar;
        def startOffset   = number - startBar;
        def endOffset     = number - endBar;
        def isStart       = number == startBar;
        def isEnd         = number == endBar;

        plot P = Double.NaN;
        P.hide();
    }

    script Value {
        input raw    = 0;
        input minRaw = 0;
        input maxRaw = 0;

        def minValue = if minRaw < 0 then minRaw else -999999999999999;
        def maxValue = if maxRaw > 0 then maxRaw else  999999999999999;

        def isValid;
        if IsNaN(raw) or IsInfinite(raw) {
            isValid = no;
        }
        else {
            isValid = raw between minValue and maxValue;
        }

        def value = if isValid or !Chart().isValidBar
            then raw
            else value[1];

        plot P = Double.NaN;
        P.hide();
    }

    script Periods {
        input period  = "Chart";
        input since   = 20250407;
        input candles = 100;

        def isStart     = Chart().isStart;
        def endBar      = Chart().endBar;
        def aggregation = GetAggregationPeriod();

        def isNew;
        if period == "Daily" and aggregation <= AggregationPeriod.FOUR_HOURS {
            isNew = isStart or Date() != Date()[1];
        }
        else if period == "Weekly" and aggregation <= AggregationPeriod.TWO_DAYS {
            isNew = isStart or Date().yyyyww != Date().yyyyww[1];
        }
        else if period == "Monthly" and aggregation <= AggregationPeriod.WEEK {
            isNew = isStart or Date().yyyymm != Date().yyyymm[1];
        }
        else if period == "MonthlyOPEX" and aggregation <= AggregationPeriod.WEEK {
            isNew = isStart or Date().yyyymmOpex != Date().yyyymmOpex[1];
        }
        else if period == "Quarterly" and aggregation <= AggregationPeriod.MONTH {
            isNew = isStart or Date().yyyyq != Date().yyyyq[1];
        }
        else if period == "QuarterlyOPEX" and aggregation <= AggregationPeriod.MONTH{
            isNew = isStart or Date().yyyyqOpex != Date().yyyyqOpex[1];
        }
        else if period == "Yearly" and aggregation <= AggregationPeriod.QUARTER {
            isNew = isStart or Date().yyyy != Date().yyyy[1];
        }
        else if period == "SinceDate" {
            isNew = Date() >= since and (Date()[1] < since or isStart);
        }
        else if period == "CandlesAgo" {
            isNew = isStart and candles > endBar or BarNumber() + candles == endBar;
        }
        else {
            isNew = isStart;
        }

        def isActive = isNew or isActive[1];

        plot P = isNew;
        P.hide();
    }

    script LatestPeriod {
        input Period  = "Chart";
        input Since   = 20250407;
        input Candles = 100;

        def endBar    = Chart().endBar;
        def endOffset = Chart().endOffset;
        def date      = GetYYYYMMDD();

        def isLatest;
        if Period == "Daily" {
            isLatest = date == GetValue(date, endOffset);
        }
        else if Period == "Weekly" {
            isLatest = Date().yyyyww == GetValue(Date().yyyyww, endOffset);
        }
        else if Period == "Monthly" {
            isLatest = Date().yyyymm == GetValue(Date().yyyymm, endOffset);
        }
        else if Period == "MonthlyOPEX" {
            isLatest = Date().yyyymm == GetValue(Date().yyyymm, endOffset);
        }
        else if Period == "Quarterly" {
            isLatest = Date().yyyyq == GetValue(Date().yyyyq, endOffset);
        }
        else if Period == "QuarterlyOPEX" {
            isLatest = Date().yyyyqOpex == GetValue(Date().yyyyqOpex, endOffset);
        }
        else if Period == "Yearly" {
            isLatest = Date().yyyy == GetValue(Date().yyyy, endOffset);
        }
        else if Period == "SinceDate" {
            isLatest = date >= Since;
        }
        else if Period == "CandlesAgo" {
            isLatest = BarNumber() >= endBar - Candles;
        }
        else {
            isLatest = yes;
        }

        plot P = isLatest;
        P.hide();
    }
###


### INPUTS ###
    input RowHeight = {
        default "Tick Size",
        "Automatic",
        "Custom"
    };

    input CustomHeight = 1.0;
    input Expansion    = yes;
    input ExtendLines  = no;
    input CustomVA     = 70;

    input Period = {
        default "Chart",
        "Daily",
        "Weekly",
        "Monthly",
        "MonthlyOPEX",
        "Quarterly",
        "QuarterlyOPEX",
        "Yearly",
        "CandlesAgo",
        "SinceDate"
    };

    @Date input SinceDate = 20250407;
    input CandlesAgo      = 100;
    input Separators      = no;
###


### CALCULATIONS ###
    def isNewPeriod    = Periods(Period, SinceDate, CandlesAgo).isNew;
    def isActivePeriod = Periods(Period, SinceDate, CandlesAgo).isActive;
    def isLatestPeriod = LatestPeriod(Period, SinceDate, CandlesAgo);

    def height;
    switch (RowHeight) {
        case "Automatic":
            height = PricePerRow.AUTOMATIC;
        case "Tick Size":
            height = PricePerRow.TICKSIZE;
        case "Custom":
            height = CustomHeight;
    }

    def isSingleProfile = Expansion
        or Period == Period.SinceDate
        or Period == Period.CandlesAgo;

    profile TP = TimeProfile(
        startNewProfile      = isNewPeriod and (isLatestPeriod or !Expansion),
        numberOfProfiles     = if isSingleProfile then 1 else 1000,
        onExpansion          = Expansion,
        "value area percent" = CustomVA,
        pricePerRow          = height
    );

    def valuePOC = if !IsNaN(TP.GetPointOfControl())
        then TP.GetPointOfControl()
        else valuePOC[1];

    def valueVAH = if !IsNaN(TP.GetHighestValueArea())
        then TP.GetHighestValueArea()
        else valueVAH[1];

    def valueVAL = if !IsNaN(TP.GetLowestValueArea())
        then TP.GetLowestValueArea()
        else valueVAL[1];

    def valueH = if !IsNaN(TP.getHighest())
        then TP.getHighest()
        else valueH[1];

    def valueL = if !IsNaN(TP.getLowest())
        then TP.getLowest()
        else valueL[1];

    def shouldPlot;
    if Expansion {
        shouldPlot = isLatestPeriod and (ExtendLines or !Chart().isValidBar);
    }
    else {
        shouldPlot = isActivePeriod and (ExtendLines or Chart().isValidBar);
    }
###


### PLOTS ###
    DefineGlobalColor("Profile",   CreateColor(48, 48, 48));
    DefineGlobalColor("Separator", CreateColor(32, 32, 32));

    TP.Show(color = GlobalColor("Profile"));

    plot POC = if shouldPlot then valuePOC else Double.NaN;
    POC.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);
    POC.DefineColor("Value", CreateColor(143, 90, 35));
    POC.SetDefaultColor(POC.Color("Value"));

    plot VAH = if shouldPlot then valueVAH else Double.NaN;
    VAH.SetPaintingStrategy(PaintingStrategy.DASHES);
    VAH.DefineColor("Value", CreateColor(72, 72, 72));
    VAH.SetDefaultColor(VAH.Color("Value"));

    plot VAL = if shouldPlot then valueVAL else Double.NaN;
    VAL.SetPaintingStrategy(PaintingStrategy.DASHES);
    VAL.DefineColor("Value", CreateColor(72, 72, 72));
    VAL.SetDefaultColor(VAL.Color("Value"));

    plot HI = if shouldPlot then valueH else Double.NaN;
    HI.SetPaintingStrategy(PaintingStrategy.DASHES);
    HI.DefineColor("Value", CreateColor(48, 48, 48));
    HI.SetDefaultColor(HI.Color("Value"));

    plot LO = if shouldPlot then valueL else Double.NaN;
    LO.SetPaintingStrategy(PaintingStrategy.DASHES);
    LO.DefineColor("Value", CreateColor(48, 48, 48));
    LO.SetDefaultColor(LO.Color("Value"));

    # Separators
    AddVerticalLine(
        visible = Separators and isNewPeriod and (isLatestPeriod or !isSingleProfile),
        color   = GlobalColor("Separator"),
        stroke  = Curve.SHORT_DASH,
        text    = ""
    );
###
