declare upper;


### SCRIPTS ###
    script Date {
        def yyyymmdd = GetYYYYMMDD();
        def yyyy     = GetYear();
        def mm       = GetMonth();
        def doy      = GetDay();
        def dom      = GetDayOfMonth(yyyymmdd);
        def dow      = GetDayOfWeek(yyyymmdd);
        def dowj1    = GetDayOfWeek(yyyy * 10000 + 0101);
        def ww       = Ceil((doy + 1 + if dowj1 >= 5 then dowj1 - 7 else dowj1) / 7);
        def q        = Ceil(mm / 3);
        def yyyyq    = yyyy * 10 + q;
        def yyyymm   = yyyy * 100 + mm;
        def yyyyww   = yyyy * 100 + ww;

        def isAfterOpex    = (dom - 14 - if dow > 5 then dow - 5 else dow + 2) > 0;
        def isEndOfQuarter = mm % 3 == 0;

        def qOpex = if q + isAfterOpex * isEndOfQuarter <= 4
            then q + isAfterOpex * isEndOfQuarter
            else 1;

        def mmOpex = if mm + isAfterOpex <= 12
            then mm + isAfterOpex
            else 1;

        def yyyyOpex = if mm + isAfterOpex <= 12
            then yyyy
            else yyyy + 1;

        def yyyyqOpex  = yyyyOpex * 10  + qOpex;
        def yyyymmOpex = yyyyOpex * 100 + mmOpex;

        plot P = yyyymmdd;
        P.hide();
    }

    script Chart {
        def aggregation   = GetAggregationPeriod();
        def isIntraday    = aggregation <  AggregationPeriod.DAY;
        def isDaily       = aggregation == AggregationPeriod.DAY;
        def isMultiDay    = aggregation >  AggregationPeriod.DAY;
        def isIntradayBar = isIntraday and Date() == Date()[1];
        def number        = BarNumber();
        def startBar      = First(number);
        def endBar        = HighestAll(number * !IsNaN(close));
        def isValidBar    = number between startBar and endBar;
        def startOffset   = number - startBar;
        def endOffset     = number - endBar;
        def isStart       = number == startBar;
        def isEnd         = number == endBar;

        plot P = Double.NaN;
        P.hide();
    }

    script Value {
        input raw    = 0;
        input minRaw = 0;
        input maxRaw = 0;

        def minValue = if minRaw < 0 then minRaw else -999999999999999;
        def maxValue = if maxRaw > 0 then maxRaw else  999999999999999;

        def isValid;
        if IsNaN(raw) or IsInfinite(raw) {
            isValid = no;
        }
        else {
            isValid = raw between minValue and maxValue;
        }

        def value = if isValid or !Chart().isValidBar
            then raw
            else value[1];

        plot P = Double.NaN;
        P.hide();
    }

    script Periods {
        input period  = "Chart";
        input since   = 20250407;
        input candles = 100;

        def isStart     = Chart().isStart;
        def endBar      = Chart().endBar;
        def aggregation = GetAggregationPeriod();

        def isNew;
        if period == "Daily" and aggregation <= AggregationPeriod.FOUR_HOURS {
            isNew = isStart or Date() != Date()[1];
        }
        else if period == "Weekly" and aggregation <= AggregationPeriod.TWO_DAYS {
            isNew = isStart or Date().yyyyww != Date().yyyyww[1];
        }
        else if period == "Monthly" and aggregation <= AggregationPeriod.WEEK {
            isNew = isStart or Date().yyyymm != Date().yyyymm[1];
        }
        else if period == "MonthlyOPEX" and aggregation <= AggregationPeriod.WEEK {
            isNew = isStart or Date().yyyymmOpex != Date().yyyymmOpex[1];
        }
        else if period == "Quarterly" and aggregation <= AggregationPeriod.MONTH {
            isNew = isStart or Date().yyyyq != Date().yyyyq[1];
        }
        else if period == "QuarterlyOPEX" and aggregation <= AggregationPeriod.MONTH{
            isNew = isStart or Date().yyyyqOpex != Date().yyyyqOpex[1];
        }
        else if period == "Yearly" and aggregation <= AggregationPeriod.QUARTER {
            isNew = isStart or Date().yyyy != Date().yyyy[1];
        }
        else if period == "SinceDate" {
            isNew = Date() >= since and (Date()[1] < since or isStart);
        }
        else if period == "CandlesAgo" {
            isNew = isStart and candles > endBar or BarNumber() + candles == endBar;
        }
        else {
            isNew = isStart;
        }

        def isActive = isNew or isActive[1];

        plot P = isNew;
        P.hide();
    }

    script DailyAverage {
        input Period  = 200;
        input AvgType = AverageType.SIMPLE;
        input Quote   = FundamentalType.CLOSE;

        def value;
        def length;
        if Chart().isMultiDay {
            value  = Fundamental(Quote);
            length = Round(Period * AggregationPeriod.DAY / GetAggregationPeriod(), 0);
        }
        else {
            value  = Fundamental(Quote, GetSymbol(), AggregationPeriod.DAY);
            length = Period;
        }

        def avg;
        if length > 1 {
            avg = MovingAverage(AvgType, value, length);
        }
        else {
            avg = Double.NaN;
        }

        plot P = avg;
        P.hide();
    }
###


### INPUTS ###
    input ShowEma9   = no;
    input ShowEma12  = yes;
    input ShowEma21  = yes;
    input ShowEma34  = no;
    input ShowSma20  = no;
    input ShowSma50  = yes;
    input ShowSma100 = no;
    input ShowSma200 = yes;
    input ShowSma250 = yes;

    input Quote = {
        default "Close",
        "Open",
        "High",
        "Low",
        "HL2",
        "HLC3",
        "OHLC4",
        "VWAP"
    };
###


### LOOKUPS ###
    def type;
    switch (Quote) {
        case "Open"  : type = FundamentalType.OPEN;
        case "High"  : type = FundamentalType.HIGH;
        case "Low"   : type = FundamentalType.LOW;
        case "HL2"   : type = FundamentalType.HL2;
        case "HLC3"  : type = FundamentalType.HLC3;
        case "OHLC4" : type = FundamentalType.OHLC4;
        case "VWAP"  : type = FundamentalType.VWAP;
        default      : type = FundamentalType.CLOSE;
    }
###


### PLOTS ###
    plot EMA9 = DailyAverage(9, AverageType.EXPONENTIAL, type);
    EMA9.SetHiding(!ShowEma9);
    EMA9.DefineColor("Average", CreateColor(61, 25, 25));
    EMA9.SetDefaultColor(EMA9.Color("Average"));

    plot EMA12 = DailyAverage(12, AverageType.EXPONENTIAL, type);
    EMA12.SetHiding(!ShowEma12);
    EMA12.DefineColor("Average", CreateColor(57, 36, 23));
    EMA12.SetDefaultColor(EMA12.Color("Average"));

    plot EMA21 = DailyAverage(21, AverageType.EXPONENTIAL, type);
    EMA21.SetHiding(!ShowEma21);
    EMA21.DefineColor("Average", CreateColor(66, 47, 22));
    EMA21.SetDefaultColor(EMA21.Color("Average"));

    plot EMA34 = DailyAverage(34, AverageType.EXPONENTIAL, type);
    EMA34.SetHiding(!ShowEma34);
    EMA34.DefineColor("Average", CreateColor(59, 54, 23));
    EMA34.SetDefaultColor(EMA34.Color("Average"));

    plot SMA20 = DailyAverage(20, AverageType.SIMPLE, type);
    SMA20.SetHiding(!ShowSma20);
    SMA20.DefineColor("Average", CreateColor(23, 54, 34));
    SMA20.SetDefaultColor(SMA20.Color("Average"));

    plot SMA50 = DailyAverage(50,  AverageType.SIMPLE, type);
    SMA50.SetHiding(!ShowSma50);
    SMA50.DefineColor("Average", CreateColor(20, 49, 49));
    SMA50.SetDefaultColor(SMA50.Color("Average"));

    plot SMA100 = DailyAverage(100,  AverageType.SIMPLE, type);
    SMA100.SetHiding(!ShowSma100);
    SMA100.DefineColor("Average", CreateColor(27, 54, 86));
    SMA100.SetDefaultColor(SMA100.Color("Average"));

    plot SMA200 = DailyAverage(200, AverageType.SIMPLE, type);
    SMA200.SetHiding(!ShowSma200);
    SMA200.DefineColor("Average", CreateColor(30, 36, 82));
    SMA200.SetDefaultColor(SMA200.Color("Average"));

    plot SMA250 = DailyAverage(250, AverageType.SIMPLE, type);
    SMA250.SetHiding(!ShowSma250);
    SMA250.DefineColor("Average", CreateColor(50, 37, 82));
    SMA250.SetDefaultColor(SMA250.Color("Average"));
###
