declare upper;


### SCRIPTS ###
    script Date {
        def yyyymmdd = GetYYYYMMDD();
        def yyyy     = GetYear();
        def mm       = GetMonth();
        def doy      = GetDay();
        def dom      = GetDayOfMonth(yyyymmdd);
        def dow      = GetDayOfWeek(yyyymmdd);
        def dowj1    = GetDayOfWeek(yyyy * 10000 + 0101);
        def ww       = GetWeek();
        def q        = Ceil(mm / 3);
        def yyyyq    = yyyy * 10 + q;
        def yyyymm   = yyyy * 100 + mm;

        def minus = if yyyy > yyyy[1] and ww >= ww[1] then 1
            else if ww != ww[1] then 0
            else minus[1];

        def yyyyww = (yyyy - minus) * 100 + ww;

        def isAfterOpex    = (dom - 14 - if dow > 5 then dow - 5 else dow + 2) > 0;
        def isEndOfQuarter = mm % 3 == 0;

        def qOpex = if q + isAfterOpex * isEndOfQuarter <= 4
            then q + isAfterOpex * isEndOfQuarter
            else 1;

        def mmOpex = if mm + isAfterOpex <= 12
            then mm + isAfterOpex
            else 1;

        def yyyyOpex = if mm + isAfterOpex <= 12
            then yyyy
            else yyyy + 1;

        def yyyyqOpex  = yyyyOpex * 10  + qOpex;
        def yyyymmOpex = yyyyOpex * 100 + mmOpex;

        plot P = yyyymmdd;
        P.hide();
    }

    script Chart {
        input Validator = "$DJI";

        def aggregation   = GetAggregationPeriod();
        def isIntraday    = aggregation <  AggregationPeriod.DAY;
        def isDaily       = aggregation == AggregationPeriod.DAY;
        def isMultiDay    = aggregation >  AggregationPeriod.DAY;
        def isIntradayBar = isIntraday and Date() == Date()[1];
        def number        = BarNumber();
        def startBar      = First(number);
        def endBar        = HighestAll(number * !IsNaN(close(Validator)));
        def isValidBar    = number between startBar and endBar;
        def startOffset   = number - startBar;
        def endOffset     = number - endBar;
        def isStart       = number == startBar;
        def isEnd         = number == endBar;

        plot P = Double.NaN;
        P.hide();
    }

    script Value {
        input raw    = 0;
        input minRaw = 0;
        input maxRaw = 0;

        def minValue = if minRaw < 0 then minRaw else -999999999999999;
        def maxValue = if maxRaw > 0 then maxRaw else  999999999999999;

        def isValid;
        if IsNaN(raw) or IsInfinite(raw) {
            isValid = no;
        }
        else {
            isValid = raw between minValue and maxValue;
        }

        def value = if isValid or !Chart().isValidBar
            then raw
            else value[1];

        plot P = value;
        P.hide();
    }

    script Periods {
        input period  = "Chart";
        input since   = 20250407;
        input candles = 100;

        def isStart     = Chart().isStart;
        def endBar      = Chart().endBar;
        def aggregation = GetAggregationPeriod();

        def isNew;
        if period == "Daily" and aggregation <= AggregationPeriod.FOUR_HOURS {
            isNew = isStart or Date() != Date()[1];
        }
        else if period == "Weekly" and aggregation <= AggregationPeriod.TWO_DAYS {
            isNew = isStart or Date().yyyyww != Date().yyyyww[1];
        }
        else if period == "Monthly" and aggregation <= AggregationPeriod.WEEK {
            isNew = isStart or Date().yyyymm != Date().yyyymm[1];
        }
        else if period == "MonthlyOPEX" and aggregation <= AggregationPeriod.WEEK {
            isNew = isStart or Date().yyyymmOpex != Date().yyyymmOpex[1];
        }
        else if period == "Quarterly" and aggregation <= AggregationPeriod.MONTH {
            isNew = isStart or Date().yyyyq != Date().yyyyq[1];
        }
        else if period == "QuarterlyOPEX" and aggregation <= AggregationPeriod.MONTH {
            isNew = isStart or Date().yyyyqOpex != Date().yyyyqOpex[1];
        }
        else if period == "Earnings" and aggregation <= AggregationPeriod.MONTH {
            isNew = isStart or HasEarnings(EarningTime.BEFORE_MARKET) or HasEarnings(EarningTime.AFTER_MARKET)[1];
        }
        else if period == "Yearly" and aggregation <= AggregationPeriod.QUARTER {
            isNew = isStart or Date().yyyy != Date().yyyy[1];
        }
        else if period == "SinceDate" {
            isNew = Date() >= since and (Date()[1] < since or isStart);
        }
        else if period == "CandlesAgo" {
            isNew = isStart and candles > endBar or BarNumber() + candles == endBar;
        }
        else {
            isNew = isStart;
        }

        def isActive = isNew or isActive[1];

        plot P = isNew;
        P.hide();
    }

    script GetAverage {
        input Period  = 21;
        input AvgType = AverageType.EXPONENTIAL;
        input Quote   = FundamentalType.CLOSE;
        input Daily   = yes;

        def value;
        def length;
        if Daily and Chart().isMultiDay {
            value  = Fundamental(Quote);
            length = Round(Period * AggregationPeriod.DAY / GetAggregationPeriod(), 0);
        }
        else if Daily {
            value  = Fundamental(Quote, GetSymbol(), AggregationPeriod.DAY);
            length = Period;
        }
        else {
            value  = Fundamental(Quote);
            length = Period;
        }

        def avg;
        if length > 1 {
            avg = MovingAverage(AvgType, value, length);
        }
        else {
            avg = Double.NaN;
        }

        plot P = avg;
        P.Hide();
    }
###


### INPUTS ###
    input Method = AverageType.EXPONENTIAL;

    input Quote = {
        default "Close",
        "Open",
        "High",
        "Low",
        "HL2",
        "HLC3",
        "OHLC4",
        "VWAP"
    };

    input Theme = {
        "Light",
        default "Medium",
        "Dark"
    };

    input Daily = yes;
###


### LOOKUPS ###
    def type;
    switch (Quote) {
        case "Open"  : type = FundamentalType.OPEN;
        case "High"  : type = FundamentalType.HIGH;
        case "Low"   : type = FundamentalType.LOW;
        case "HL2"   : type = FundamentalType.HL2;
        case "HLC3"  : type = FundamentalType.HLC3;
        case "OHLC4" : type = FundamentalType.OHLC4;
        case "VWAP"  : type = FundamentalType.VWAP;
        default      : type = FundamentalType.CLOSE;
    }
###


### PLOTS ###
    plot A5 = GetAverage(5, Method, type, Daily);
    A5.DefineColor("Light", CreateColor(255, 97, 97));
    A5.DefineColor("Medium", CreateColor(128, 51, 51));
    A5.DefineColor("Dark", CreateColor(61, 25, 25));
    A5.AssignValueColor(A5.Color(Theme));
    A5.Hide();

    plot A8 = GetAverage(8, Method, type, Daily);
    A8.DefineColor("Light", CreateColor(58, 157, 155));
    A8.DefineColor("Medium", CreateColor(36, 104, 103));
    A8.DefineColor("Dark", CreateColor(20, 49, 49));
    A8.AssignValueColor(A8.Color(Theme));
    A8.Hide();

    plot A13 = GetAverage(13, Method, type, Daily);
    A13.DefineColor("Light", CreateColor(217, 122, 74));
    A13.DefineColor("Medium", CreateColor(118, 70, 41));
    A13.DefineColor("Dark", CreateColor(57, 36, 23));
    A13.AssignValueColor(A13.Color(Theme));

    plot A21 = GetAverage(21, Method, type, Daily);
    A21.DefineColor("Light", CreateColor(90, 111, 234));
    A21.DefineColor("Medium", CreateColor(56, 65, 168));
    A21.DefineColor("Dark", CreateColor(30, 36, 82));
    A21.AssignValueColor(A21.Color(Theme));

    plot A34 = GetAverage(34, Method, type, Daily);
    A34.DefineColor("Light", CreateColor(255, 159, 67));
    A34.DefineColor("Medium", CreateColor(143, 90, 35));
    A34.DefineColor("Dark", CreateColor(66, 47, 22));
    A34.AssignValueColor(A34.Color(Theme));
    A34.Hide();

    plot A55 = GetAverage(55, Method, type, Daily);
    A55.DefineColor("Light", CreateColor(77, 166, 255));
    A55.DefineColor("Medium", CreateColor(50, 108, 171));
    A55.DefineColor("Dark", CreateColor(27, 54, 86));
    A55.AssignValueColor(A55.Color(Theme));

    plot A89 = GetAverage(89, Method, type, Daily);
    A89.DefineColor("Light", CreateColor(230, 205, 80));
    A89.DefineColor("Medium", CreateColor(128, 115, 36));
    A89.DefineColor("Dark", CreateColor(59, 54, 23));
    A89.AssignValueColor(A89.Color(Theme));
    A89.Hide();

    plot A144 = GetAverage(144, Method, type, Daily);
    A144.DefineColor("Light", CreateColor(155, 106, 229));
    A144.DefineColor("Medium", CreateColor(93, 63, 166));
    A144.DefineColor("Dark", CreateColor(50, 37, 82));
    A144.AssignValueColor(A144.Color(Theme));
    A144.Hide();

    plot A233 = GetAverage(233, Method, type, Daily);
    A233.DefineColor("Light", CreateColor(229, 115, 155));
    A233.DefineColor("Medium", CreateColor(152, 63, 89));
    A233.DefineColor("Dark", CreateColor(75, 39, 52));
    A233.AssignValueColor(A233.Color(Theme));
    A233.Hide();

    plot A377 = GetAverage(377, Method, type, Daily);
    A377.DefineColor("Light", CreateColor(92, 201, 119));
    A377.DefineColor("Medium", CreateColor(43, 116, 68));
    A377.DefineColor("Dark", CreateColor(23, 54, 34));
    A377.AssignValueColor(A377.Color(Theme));
    A377.Hide();
###
