declare lower;


### SCRIPTS ###
    script Date {
        def yyyymmdd = GetYYYYMMDD();
        def yyyy     = GetYear();
        def mm       = GetMonth();
        def doy      = GetDay();
        def dom      = GetDayOfMonth(yyyymmdd);
        def dow      = GetDayOfWeek(yyyymmdd);
        def dowj1    = GetDayOfWeek(yyyy * 10000 + 0101);
        def ww       = GetWeek();
        def q        = Ceil(mm / 3);
        def yyyyq    = yyyy * 10 + q;
        def yyyymm   = yyyy * 100 + mm;

        def minus = if yyyy > yyyy[1] and ww >= ww[1] then 1
            else if ww != ww[1] then 0
            else minus[1];

        def yyyyww = (yyyy - minus) * 100 + ww;

        def isAfterOpex    = (dom - 14 - if dow > 5 then dow - 5 else dow + 2) > 0;
        def isEndOfQuarter = mm % 3 == 0;

        def qOpex = if q + isAfterOpex * isEndOfQuarter <= 4
            then q + isAfterOpex * isEndOfQuarter
            else 1;

        def mmOpex = if mm + isAfterOpex <= 12
            then mm + isAfterOpex
            else 1;

        def yyyyOpex = if mm + isAfterOpex <= 12
            then yyyy
            else yyyy + 1;

        def yyyyqOpex  = yyyyOpex * 10  + qOpex;
        def yyyymmOpex = yyyyOpex * 100 + mmOpex;

        def lastEarnings = if HasEarnings(EarningTime.BEFORE_MARKET) or HasEarnings(EarningTime.AFTER_MARKET)[1]
            then GetYYYYMMDD()
            else lastEarnings[1];

        plot P = yyyymmdd;
        P.hide();
    }

    script Chart {
        input Validator = "$DJI";

        def aggregation   = GetAggregationPeriod();
        def isIntraday    = aggregation <  AggregationPeriod.DAY;
        def isDaily       = aggregation == AggregationPeriod.DAY;
        def isMultiDay    = aggregation >  AggregationPeriod.DAY;
        def isIntradayBar = isIntraday and Date() == Date()[1];
        def number        = BarNumber();
        def startBar      = First(number);
        def endBar        = HighestAll(number * !IsNaN(close(Validator)));
        def isValidBar    = number between startBar and endBar;
        def startOffset   = number - startBar;
        def endOffset     = number - endBar;
        def isStart       = number == startBar;
        def isEnd         = number == endBar;

        plot P = Double.NaN;
        P.hide();
    }

    script Value {
        input raw    = 0;
        input minRaw = 0;
        input maxRaw = 0;

        def minValue = if minRaw < 0 then minRaw else -999999999999999;
        def maxValue = if maxRaw > 0 then maxRaw else  999999999999999;

        def isValid;
        if IsNaN(raw) or IsInfinite(raw) {
            isValid = no;
        }
        else {
            isValid = raw between minValue and maxValue;
        }

        def value = if isValid or !Chart().isValidBar
            then raw
            else value[1];

        plot P = value;
        P.hide();
    }

    script Filters {
        input raw         = 0;
        input oscillation = 0;
        input smoothing   = 0;

        def oscValue;
        if oscillation > 1 {
            oscValue = raw - Average(raw, oscillation);
        }
        else {
            oscValue = raw;
        }

        def value;
        if smoothing > 1 {
            value = Inertia(oscValue, smoothing);
        }
        else {
            value = oscValue;
        }

        plot P = value;
        P.Hide();
    }

    script Periods {
        input period  = "Chart";
        input since   = 20250407;
        input candles = 100;

        def isStart     = Chart().isStart;
        def endBar      = Chart().endBar;
        def aggregation = GetAggregationPeriod();

        def isNew;
        if period == "Daily" and aggregation <= AggregationPeriod.FOUR_HOURS {
            isNew = isStart or Date() != Date()[1];
        }
        else if period == "Weekly" and aggregation <= AggregationPeriod.TWO_DAYS {
            isNew = isStart or Date().yyyyww != Date().yyyyww[1];
        }
        else if period == "Monthly" and aggregation <= AggregationPeriod.WEEK {
            isNew = isStart or Date().yyyymm != Date().yyyymm[1];
        }
        else if period == "MonthlyOPEX" and aggregation <= AggregationPeriod.WEEK {
            isNew = isStart or Date().yyyymmOpex != Date().yyyymmOpex[1];
        }
        else if period == "Quarterly" and aggregation <= AggregationPeriod.MONTH {
            isNew = isStart or Date().yyyyq != Date().yyyyq[1];
        }
        else if period == "QuarterlyOPEX" and aggregation <= AggregationPeriod.MONTH {
            isNew = isStart or Date().yyyyqOpex != Date().yyyyqOpex[1];
        }
        else if period == "Earnings" and aggregation <= AggregationPeriod.MONTH {
            isNew = isStart or Date().lastEarnings != Date().lastEarnings[1];
        }
        else if period == "Yearly" and aggregation <= AggregationPeriod.QUARTER {
            isNew = isStart or Date().yyyy != Date().yyyy[1];
        }
        else if period == "SinceDate" {
            isNew = Date() >= since and (Date()[1] < since or isStart);
        }
        else if period == "CandlesAgo" {
            isNew = isStart and candles > endBar or BarNumber() + candles == endBar;
        }
        else {
            isNew = isStart;
        }

        def isActive = isNew or isActive[1];

        plot P = isNew;
        P.hide();
    }
###


### INPUTS ###
    input Quote = {
        default "Close",
        "Open",
        "High",
        "Low",
        "HL2",
        "HLC3",
        "OHLC4"
    };

    input Display = {
        default "Absolute",
        "Percentage",
        "Signal"
    };

    input Sanitize  = no;
    input Smoothing = 0;
###


### LOOKUPS ###
    def type;
    switch (Quote) {
        case "Open"  : type = FundamentalType.OPEN;
        case "High"  : type = FundamentalType.HIGH;
        case "Low"   : type = FundamentalType.LOW;
        case "HL2"   : type = FundamentalType.HL2;
        case "HLC3"  : type = FundamentalType.HLC3;
        case "OHLC4" : type = FundamentalType.OHLC4;
        default      : type = FundamentalType.CLOSE;
    }

    def raw50  = Fundamental(type, "$SPXA50R");
    def raw100 = Fundamental(type, "$SPXA100R");
    def raw200 = Fundamental(type, "$SPXA200R");
    def rawAll = close("$ADVSP") + close("$DECLSP") + close("$UNCHSP");

    def data50;
    def try100;
    def data200;
    def dataAll;
    if Sanitize {
        data50  = Value(raw50);
        try100  = Value(raw100);
        data200 = Value(raw200);
        dataAll = Value(rawAll);
    }
    else {
        data50  = raw50;
        try100  = raw100;
        data200 = raw200;
        dataAll = rawAll;
    }

    def data100 = if IsNaN(try100)
        then (data200 + data50) / 2
        else try100;
###


### CALCULATIONS ###
    # Plots
    def value50;
    def value100;
    def value200;
    if Display == Display.Absolute {
        value50  = data50  * dataAll;
        value100 = data100 * dataAll;
        value200 = data200 * dataAll;
    }
    else {
        value50  = data50;
        value100 = data100;
        value200 = data200;
    }

    def signal = Min(data200, data100) - data50;

    # Neutral
    def neutral;
    switch (Display) {
        case "Absolute"   : neutral = dataAll / 2;
        case "Percentage" : neutral = 0.5;
        default           : neutral = 0;
    }
###


### PLOTS ###
    DefineGlobalColor("Line", CreateColor(48, 48, 48));

    # 50
    plot V50 = Filters(value50, 0, Smoothing);
    V50.SetHiding(Display == Display.Signal);
    V50.DefineColor("Value", Color.UPTICK);
    V50.SetDefaultColor(V50.Color("Value"));

    # 100
    plot V100 = Filters(value100, 0, Smoothing);
    V100.SetHiding(Display == Display.Signal);
    V100.DefineColor("Value", Color.ORANGE);
    V100.SetDefaultColor(V100.Color("Value"));

    # 200
    plot V200 = Filters(value200, 0, Smoothing);
    V200.SetHiding(Display == Display.Signal);
    V200.DefineColor("Value", Color.DOWNTICK);
    V200.SetDefaultColor(V200.Color("Value"));

    # Signal
    plot S = Filters(signal, 0, Smoothing);
    S.SetHiding(Display != Display.Signal);
    S.SetPaintingStrategy(PaintingStrategy.HISTOGRAM);
    S.DefineColor("Up", Color.UPTICK);
    S.DefineColor("Down", Color.DOWNTICK);
    S.DefineColor("Neutral", Color.DARK_GRAY);
    S.SetDefaultColor(S.Color("Neutral"));
    S.AssignValueColor(
        if S > neutral
            then S.Color("Up")
        else if S < neutral
            then S.Color("Down")
            else S.Color("Neutral")
    );

    # Line
    plot N = neutral;
    N.SetDefaultColor(GlobalColor("Line"));
    N.HideBubble();
    N.HideTitle();
    N.Hide();
###
