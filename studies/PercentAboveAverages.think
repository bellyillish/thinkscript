declare lower;


### SCRIPTS ###
    script Date {
        def yyyymmdd = GetYYYYMMDD();
        def yyyy     = GetYear();
        def mm       = GetMonth();
        def doy      = GetDay();
        def dom      = GetDayOfMonth(yyyymmdd);
        def dow      = GetDayOfWeek(yyyymmdd);
        def dowj1    = GetDayOfWeek(yyyy * 10000 + 0101);
        def ww       = Ceil((doy + 1 + if dowj1 >= 5 then dowj1 - 7 else dowj1) / 7);
        def q        = Ceil(mm / 3);
        def yyyyq    = yyyy * 10 + q;
        def yyyymm   = yyyy * 100 + mm;
        def yyyyww   = yyyy * 100 + ww;

        def isAfterOpex    = (dom - 14 - if dow > 5 then dow - 5 else dow + 2) > 0;
        def isEndOfQuarter = mm % 3 == 0;

        def qOpex = if q + isAfterOpex * isEndOfQuarter <= 4
            then q + isAfterOpex * isEndOfQuarter
            else 1;

        def mmOpex = if mm + isAfterOpex <= 12
            then mm + isAfterOpex
            else 1;

        def yyyyOpex = if mm + isAfterOpex <= 12
            then yyyy
            else yyyy + 1;

        def yyyyqOpex  = yyyyOpex * 10  + qOpex;
        def yyyymmOpex = yyyyOpex * 100 + mmOpex;

        plot P = yyyymmdd;
        P.hide();
    }

    script Chart {
        def aggregation   = GetAggregationPeriod();
        def isIntraday    = aggregation <  AggregationPeriod.DAY;
        def isDaily       = aggregation == AggregationPeriod.DAY;
        def isMultiDay    = aggregation >  AggregationPeriod.DAY;
        def isIntradayBar = isIntraday and Date() == Date()[1];
        def number        = BarNumber();
        def startBar      = First(number);
        def endBar        = HighestAll(number * !IsNaN(close));
        def isValidBar    = number between startBar and endBar;
        def startOffset   = number - startBar;
        def endOffset     = number - endBar;
        def isStart       = number == startBar;
        def isEnd         = number == endBar;

        plot P = Double.NaN;
        P.hide();
    }

    script Value {
        input raw    = 0;
        input minRaw = 0;
        input maxRaw = 0;

        def minValue = if minRaw < 0 then minRaw else -999999999999999;
        def maxValue = if maxRaw > 0 then maxRaw else  999999999999999;

        def isValid;
        if IsNaN(raw) or IsInfinite(raw) {
            isValid = no;
        }
        else {
            isValid = raw between minValue and maxValue;
        }

        def value = if isValid or !Chart().isValidBar
            then raw
            else value[1];

        plot P = Double.NaN;
        P.hide();
    }

    script Periods {
        input period  = "Chart";
        input since   = 20250407;
        input candles = 100;

        def isStart     = Chart().isStart;
        def endBar      = Chart().endBar;
        def aggregation = GetAggregationPeriod();

        def isNew;
        if period == "Daily" and aggregation <= AggregationPeriod.FOUR_HOURS {
            isNew = isStart or Date() != Date()[1];
        }
        else if period == "Weekly" and aggregation <= AggregationPeriod.TWO_DAYS {
            isNew = isStart or Date().yyyyww != Date().yyyyww[1];
        }
        else if period == "Monthly" and aggregation <= AggregationPeriod.WEEK {
            isNew = isStart or Date().yyyymm != Date().yyyymm[1];
        }
        else if period == "MonthlyOPEX" and aggregation <= AggregationPeriod.WEEK {
            isNew = isStart or Date().yyyymmOpex != Date().yyyymmOpex[1];
        }
        else if period == "Quarterly" and aggregation <= AggregationPeriod.MONTH {
            isNew = isStart or Date().yyyyq != Date().yyyyq[1];
        }
        else if period == "QuarterlyOPEX" and aggregation <= AggregationPeriod.MONTH{
            isNew = isStart or Date().yyyyqOpex != Date().yyyyqOpex[1];
        }
        else if period == "Yearly" and aggregation <= AggregationPeriod.QUARTER {
            isNew = isStart or Date().yyyy != Date().yyyy[1];
        }
        else if period == "SinceDate" {
            isNew = Date() >= since and (Date()[1] < since or isStart);
        }
        else if period == "CandlesAgo" {
            isNew = isStart and candles > endBar or BarNumber() + candles == endBar;
        }
        else {
            isNew = isStart;
        }

        def isActive = isNew or isActive[1];

        plot P = isNew;
        P.hide();
    }
###


### INPUTS ###
    input Display = {
        default "Percent",
        "Absolute"
    };

    input Smoothing = 0;

    input Quote = {
        default "Close",
        "Open",
        "High",
        "Low",
        "HL2",
        "HLC3",
        "OHLC4"
    };

    input Sanitize = no;
###


### LOOKUPS ###
    def type;
    switch (Quote) {
        case "Open"  : type = FundamentalType.OPEN;
        case "High"  : type = FundamentalType.HIGH;
        case "Low"   : type = FundamentalType.LOW;
        case "HL2"   : type = FundamentalType.HL2;
        case "HLC3"  : type = FundamentalType.HLC3;
        case "OHLC4" : type = FundamentalType.OHLC4;
        default      : type = FundamentalType.CLOSE;
    }

    def raw50    = Fundamental(type, "$SPXA50R");
    def raw200   = Fundamental(type, "$SPXA200R");
    def rawTotal = HighestAll(close("$ADVSP") + close("$DECLSP") + close("$UNCHSP"));

    def data50;
    def data200;
    def dataTotal;
    if Sanitize {
        data50    = Value(raw50).value;
        data200   = Value(raw200).value;
        dataTotal = Value(rawTotal).value;
    }
    else {
        data50    = raw50;
        data200   = raw200;
        dataTotal = rawTotal;
    }
###


### CALCULATIONS ###
    # Absolute
    def abs50;
    def abs200;
    if Display == Display.Absolute {
        abs50  = data50  * dataTotal;
        abs200 = data200 * dataTotal;
    }
    else {
        abs50  = data50;
        abs200 = data200;
    }

    # Smoothing
    def value50;
    def value200;
    if Smoothing > 1 {
        value50  = Inertia(abs50, Smoothing);
        value200 = Inertia(abs200, Smoothing);
    }
    else {
        value50  = abs50;
        value200 = abs200;
    }

    # Total
    def total;
    if Display == Display.Absolute {
        total = dataTotal;
    }
    else {
        total = 1;
    }
###


### PLOTS ###
    DefineGlobalColor("Line", CreateColor(48, 48, 48));

    # Abve 50
    plot A50 = value50;
    A50.DefineColor("Value", Color.UPTICK);
    A50.SetDefaultColor(A50.Color("Value"));

    # Above 200
    plot A200 = value200;
    A200.DefineColor("Value", Color.DOWNTICK);
    A200.SetDefaultColor(A200.Color("Value"));

    # Top
    plot Top = total;
    Top.SetDefaultColor(GlobalColor("Line"));
    Top.SetPaintingStrategy(PaintingStrategy.DASHES);
    Top.HideBubble();
    Top.HideTitle();

    # Mid
    plot Mid = total / 2;
    Mid.SetDefaultColor(GlobalColor("Line"));
    Mid.HideBubble();
    Mid.HideTitle();

    # Bottom
    plot Bottom = 0;
    Bottom.SetDefaultColor(GlobalColor("Line"));
    Bottom.SetPaintingStrategy(PaintingStrategy.DASHES);
    Bottom.HideBubble();
    Bottom.HideTitle();
###
