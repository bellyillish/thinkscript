declare lower;


### SCRIPTS ###
    script Date {
        def yyyymmdd = GetYYYYMMDD();
        def yyyy     = GetYear();
        def mm       = GetMonth();
        def doy      = GetDay();
        def dom      = GetDayOfMonth(yyyymmdd);
        def dow      = GetDayOfWeek(yyyymmdd);
        def dowj1    = GetDayOfWeek(yyyy * 10000 + 0101);
        def ww       = GetWeek();
        def q        = Ceil(mm / 3);
        def yyyyq    = yyyy * 10 + q;
        def yyyymm   = yyyy * 100 + mm;

        def minus = if yyyy > yyyy[1] and ww >= ww[1] then 1
            else if ww != ww[1] then 0
            else minus[1];

        def yyyyww = (yyyy - minus) * 100 + ww;

        def isAfterOpex    = (dom - 14 - if dow > 5 then dow - 5 else dow + 2) > 0;
        def isEndOfQuarter = mm % 3 == 0;

        def qOpex = if q + isAfterOpex * isEndOfQuarter <= 4
            then q + isAfterOpex * isEndOfQuarter
            else 1;

        def mmOpex = if mm + isAfterOpex <= 12
            then mm + isAfterOpex
            else 1;

        def yyyyOpex = if mm + isAfterOpex <= 12
            then yyyy
            else yyyy + 1;

        def yyyyqOpex  = yyyyOpex * 10  + qOpex;
        def yyyymmOpex = yyyyOpex * 100 + mmOpex;

        def lastEarnings = if HasEarnings(EarningTime.BEFORE_MARKET) or HasEarnings(EarningTime.AFTER_MARKET)[1]
            then GetYYYYMMDD()
            else lastEarnings[1];

        plot P = yyyymmdd;
        P.hide();
    }

    script Chart {
        input Validator = "$DJI";

        def aggregation   = GetAggregationPeriod();
        def isIntraday    = aggregation <  AggregationPeriod.DAY;
        def isDaily       = aggregation == AggregationPeriod.DAY;
        def isMultiDay    = aggregation >  AggregationPeriod.DAY;
        def isIntradayBar = isIntraday and Date() == Date()[1];
        def number        = BarNumber();
        def startBar      = First(number);
        def endBar        = HighestAll(number * !IsNaN(close(Validator)));
        def isValidBar    = number between startBar and endBar;
        def startOffset   = number - startBar;
        def endOffset     = number - endBar;
        def isStart       = number == startBar;
        def isEnd         = number == endBar;

        plot P = Double.NaN;
        P.hide();
    }

    script Value {
        input raw    = 0;
        input minRaw = 0;
        input maxRaw = 0;

        def minValue = if minRaw < 0 then minRaw else -999999999999999;
        def maxValue = if maxRaw > 0 then maxRaw else  999999999999999;

        def isValid;
        if IsNaN(raw) or IsInfinite(raw) {
            isValid = no;
        }
        else {
            isValid = raw between minValue and maxValue;
        }

        def value = if isValid or !Chart().isValidBar
            then raw
            else value[1];

        plot P = value;
        P.hide();
    }

    script Filters {
        input raw         = 0;
        input oscillation = 0;
        input smoothing   = 0;

        def oscValue;
        if oscillation > 1 {
            oscValue = raw - Average(raw, oscillation);
        }
        else {
            oscValue = raw;
        }

        def value;
        if smoothing > 1 {
            value = Inertia(oscValue, smoothing);
        }
        else {
            value = oscValue;
        }

        plot P = value;
        P.Hide();
    }

    script Periods {
        input period  = "Chart";
        input since   = 20250407;
        input candles = 100;

        def isStart     = Chart().isStart;
        def endBar      = Chart().endBar;
        def aggregation = GetAggregationPeriod();

        def isNew;
        if period == "Daily" and aggregation <= AggregationPeriod.FOUR_HOURS {
            isNew = isStart or Date() != Date()[1];
        }
        else if period == "Weekly" and aggregation <= AggregationPeriod.TWO_DAYS {
            isNew = isStart or Date().yyyyww != Date().yyyyww[1];
        }
        else if period == "Monthly" and aggregation <= AggregationPeriod.WEEK {
            isNew = isStart or Date().yyyymm != Date().yyyymm[1];
        }
        else if period == "MonthlyOPEX" and aggregation <= AggregationPeriod.WEEK {
            isNew = isStart or Date().yyyymmOpex != Date().yyyymmOpex[1];
        }
        else if period == "Quarterly" and aggregation <= AggregationPeriod.MONTH {
            isNew = isStart or Date().yyyyq != Date().yyyyq[1];
        }
        else if period == "QuarterlyOPEX" and aggregation <= AggregationPeriod.MONTH {
            isNew = isStart or Date().yyyyqOpex != Date().yyyyqOpex[1];
        }
        else if period == "Earnings" and aggregation <= AggregationPeriod.MONTH {
            isNew = isStart or Date().lastEarnings != Date().lastEarnings[1];
        }
        else if period == "Yearly" and aggregation <= AggregationPeriod.QUARTER {
            isNew = isStart or Date().yyyy != Date().yyyy[1];
        }
        else if period == "SinceDate" {
            isNew = Date() >= since and (Date()[1] < since or isStart);
        }
        else if period == "CandlesAgo" {
            isNew = isStart and candles > endBar or BarNumber() + candles == endBar;
        }
        else {
            isNew = isStart;
        }

        def isActive = isNew or isActive[1];

        plot P = isNew;
        P.hide();
    }
###


### INPUTS ###
    input Market = {
        default "ALLUSA",
        "CBOE Total",
        "CBOE Index",
        "CBOE Equities",
        "NYSE",
        "NASDAQ",
        "S&P 500",
        "NASDAQ 100",
        "RUSSELL 2000",
        "DJIA"
    };

    input Quote = {
        default "Close",
        "Open",
        "High",
        "Low",
        "HL2",
        "HLC3",
        "OHLC4",
        "VWAP"
    };

    input Display = {
        default "Difference",
        "Tick",
        "Percentage",
        "Ratio",
        "Log Ratio",
        "Cumulative"
    };

    input Period = {
        default "Chart",
        "Daily",
        "Weekly",
        "Monthly",
        "MonthlyOPEX",
        "Quarterly",
        "QuarterlyOPEX",
        "Earnings",
        "Yearly",
        "CandlesAgo",
        "SinceDate"
    };

    @Date input SinceDate = 20250407;
    input CandlesAgo      = 100;
    input Separators      = yes;
    input Sanitize        = no;
    input Oscillation     = 0;
    input Smoothing       = 0;
###


### LOOKUPS ###
    def type;
    switch (Quote) {
        case "Open"  : type = FundamentalType.OPEN;
        case "High"  : type = FundamentalType.HIGH;
        case "Low"   : type = FundamentalType.LOW;
        case "HL2"   : type = FundamentalType.HL2;
        case "HLC3"  : type = FundamentalType.HLC3;
        case "OHLC4" : type = FundamentalType.OHLC4;
        case "VWAP"  : type = FundamentalType.VWAP;
        default      : type = FundamentalType.CLOSE;
    }

    def rawAll;
    def rawTicks;
    def rawRatio;
    switch (Market) {
        case "ALLUSA":
            rawAll   = volume("$PCALL");
            rawTicks = tick_count("$PCALL");
            rawRatio = Fundamental(type, "$PCALL");
        case "CBOE Total":
            rawAll   = volume("$CPC");
            rawTicks = tick_count("$CPC");
            rawRatio = Fundamental(type, "$CPC");
        case "CBOE Index":
            rawAll  = volume("$CPCI");
            rawTicks = tick_count("$CPCI");
            rawRatio = Fundamental(type, "$CPCI");
        case "CBOE Equities":
            rawAll  = volume("$CPCE");
            rawTicks = tick_count("$CPCE");
            rawRatio = Fundamental(type, "$CPCE");
        case "NYSE":
            rawAll  = volume("$PCN");
            rawTicks = tick_count("$PCN");
            rawRatio = Fundamental(type, "$PCN");
        case "NASDAQ":
            rawAll  = volume("$PCN/Q");
            rawTicks = tick_count("$PCN/Q");
            rawRatio = Fundamental(type, "$PCN/Q");
        case "S&P 500":
            rawAll  = volume("$PCSP");
            rawTicks = tick_count("$PCSP");
            rawRatio = Fundamental(type, "$PCSP");
        case "NASDAQ 100":
            rawAll  = volume("$PCND");
            rawTicks = tick_count("$PCND");
            rawRatio = Fundamental(type, "$PCND");
        case "RUSSELL 2000":
            rawAll  = volume("$PCRL");
            rawTicks = tick_count("$PCRL");
            rawRatio = Fundamental(type, "$PCRL");
        case "DJIA":
            rawAll  = volume("$PCI");
            rawTicks = tick_count("$PCI");
            rawRatio = Fundamental(type, "$PCI");
    };

    def dataAll;
    def dataTicks;
    def dataRatio;
    if Sanitize {
        dataAll   = Value(rawAll);
        dataTicks = Value(rawTicks);
        dataRatio = Value(rawRatio);
    }
    else {
        dataAll   = rawAll;
        dataTicks = rawTicks;
        dataRatio = rawRatio;
    }
###


### CALCULATIONS ###
    def isNewPeriod    = Periods(Period, SinceDate, CandlesAgo).isNew;
    def isActivePeriod = Periods(Period, SinceDate, CandlesAgo).isActive;

    # Data Fixes
    def all;
    if Chart().isIntraday {
        all = Round(dataAll * HighestAll(dataTicks) / dataTicks, 0);
    }
    else {
        all = dataAll;
    }

    # Puts/calls
    def calls = Round(all / (dataRatio + 1), 0);
    def puts  = all - calls;

    # Tick
    def tickCalls;
    def tickPuts;
    def tickAll;
    if Chart().isIntradayBar {
        tickCalls = Max(0, calls - calls[1]);
        tickPuts  = Max(0, puts - puts[1]);
        tickAll   = Max(0, all - all[1]);
    }
    else {
        tickCalls = calls;
        tickPuts  = puts;
        tickAll   = all;
    }

    # Cumulative
    def sum;
    if !Chart().isValidBar or !isActivePeriod {
        sum = Double.NaN;
    }
    else if isNewPeriod or IsNaN(sum[1]) {
        sum = tickCalls - tickPuts;
    }
    else {
        sum = sum[1] + (tickCalls - tickPuts);
    }

    # Plots
    def value;
    switch (Display) {
        case "Difference" : value = calls - puts;
        case "Tick"       : value = tickCalls - tickPuts;
        case "Ratio"      : value = Value(calls / puts);
        case "Log Ratio"  : value = Value(Log(calls / puts));
        case "Percentage" : value = Value(calls / all);
        case "Cumulative" : value = sum;
    }

    # Neutral
    def neutral;
    switch (Display) {
        case "Percentage" : neutral = 0.5;
        case "Ratio"      : neutral = 1;
        default           : neutral = 0;
    }
###


### PLOTS ###
    DefineGlobalColor("Line",       CreateColor(48, 48, 48));
    DefineGlobalColor("Separator",  CreateColor(32, 32, 32));
    DefineGlobalColor("Background", CreateColor(12, 12, 12));

    # Value
    plot PC = Filters(value, Oscillation, Smoothing);
    PC.DefineColor("Up", Color.UPTICK);
    PC.DefineColor("Down", Color.DOWNTICK);
    PC.DefineColor("Neutral", Color.DARK_GRAY);
    PC.SetDefaultColor(PC.Color("Neutral"));
    PC.AssignValueColor(
        if isNewPeriod and isActivePeriod[1]
            then GlobalColor("Background")
        else if PC > neutral
            then PC.Color("Up")
        else if PC < neutral
            then PC.Color("Down")
            else PC.Color("Neutral")
    );

    # Line
    plot N = neutral;
    N.SetDefaultColor(GlobalColor("Line"));
    N.HideBubble();
    N.HideTitle();
    N.Hide();

    # Separators
    AddVerticalLine(
        visible = Separators and isNewPeriod and isActivePeriod[1],
        color   = GlobalColor("Separator"),
        stroke  = Curve.SHORT_DASH,
        text    = ""
    );
###
