declare lower;


### SCRIPTS ###
    script Date {
        def yyyymmdd = GetYYYYMMDD();
        def yyyy     = GetYear();
        def mm       = GetMonth();
        def doy      = GetDay();
        def dom      = GetDayOfMonth(yyyymmdd);
        def dow      = GetDayOfWeek(yyyymmdd);
        def dowj1    = GetDayOfWeek(yyyy * 10000 + 0101);
        def ww       = GetWeek();
        def q        = Ceil(mm / 3);
        def yyyyq    = yyyy * 10 + q;
        def yyyymm   = yyyy * 100 + mm;

        def minus = if yyyy > yyyy[1] and ww >= ww[1] then 1
            else if ww != ww[1] then 0
            else minus[1];

        def yyyyww = (yyyy - minus) * 100 + ww;

        def isAfterOpex    = (dom - 14 - if dow > 5 then dow - 5 else dow + 2) > 0;
        def isEndOfQuarter = mm % 3 == 0;

        def qOpex = if q + isAfterOpex * isEndOfQuarter <= 4
            then q + isAfterOpex * isEndOfQuarter
            else 1;

        def mmOpex = if mm + isAfterOpex <= 12
            then mm + isAfterOpex
            else 1;

        def yyyyOpex = if mm + isAfterOpex <= 12
            then yyyy
            else yyyy + 1;

        def yyyyqOpex  = yyyyOpex * 10  + qOpex;
        def yyyymmOpex = yyyyOpex * 100 + mmOpex;

        def lastEarnings = if HasEarnings(EarningTime.BEFORE_MARKET) or HasEarnings(EarningTime.AFTER_MARKET)[1]
            then GetYYYYMMDD()
            else lastEarnings[1];

        plot P = yyyymmdd;
        P.hide();
    }

    script Chart {
        input Validator = "$DJI";

        def aggregation   = GetAggregationPeriod();
        def isIntraday    = aggregation <  AggregationPeriod.DAY;
        def isDaily       = aggregation == AggregationPeriod.DAY;
        def isMultiDay    = aggregation >  AggregationPeriod.DAY;
        def isIntradayBar = isIntraday and Date() == Date()[1];
        def number        = BarNumber();
        def startBar      = First(number);
        def endBar        = HighestAll(number * !IsNaN(close(Validator)));
        def isValidBar    = number between startBar and endBar;
        def startOffset   = number - startBar;
        def endOffset     = number - endBar;
        def isStart       = number == startBar;
        def isEnd         = number == endBar;

        plot P = Double.NaN;
        P.hide();
    }

    script Value {
        input raw    = 0;
        input minRaw = 0;
        input maxRaw = 0;

        def minValue = if minRaw < 0 then minRaw else -999999999999999;
        def maxValue = if maxRaw > 0 then maxRaw else  999999999999999;

        def isValid;
        if IsNaN(raw) or IsInfinite(raw) {
            isValid = no;
        }
        else {
            isValid = raw between minValue and maxValue;
        }

        def value = if isValid or !Chart().isValidBar
            then raw
            else value[1];

        plot P = value;
        P.hide();
    }

    script Filters {
        input raw         = 0;
        input oscillation = 0;
        input smoothing   = 0;

        def oscValue;
        if oscillation > 1 {
            oscValue = raw - Average(raw, oscillation);
        }
        else {
            oscValue = raw;
        }

        def value;
        if smoothing > 1 {
            value = Inertia(oscValue, smoothing);
        }
        else {
            value = oscValue;
        }

        plot P = value;
        P.Hide();
    }

    script Periods {
        input period  = "Chart";
        input since   = 20250407;
        input candles = 100;

        def isStart     = Chart().isStart;
        def endBar      = Chart().endBar;
        def aggregation = GetAggregationPeriod();

        def isNew;
        if period == "Daily" and aggregation <= AggregationPeriod.FOUR_HOURS {
            isNew = isStart or Date() != Date()[1];
        }
        else if period == "Weekly" and aggregation <= AggregationPeriod.TWO_DAYS {
            isNew = isStart or Date().yyyyww != Date().yyyyww[1];
        }
        else if period == "Monthly" and aggregation <= AggregationPeriod.WEEK {
            isNew = isStart or Date().yyyymm != Date().yyyymm[1];
        }
        else if period == "MonthlyOPEX" and aggregation <= AggregationPeriod.WEEK {
            isNew = isStart or Date().yyyymmOpex != Date().yyyymmOpex[1];
        }
        else if period == "Quarterly" and aggregation <= AggregationPeriod.MONTH {
            isNew = isStart or Date().yyyyq != Date().yyyyq[1];
        }
        else if period == "QuarterlyOPEX" and aggregation <= AggregationPeriod.MONTH {
            isNew = isStart or Date().yyyyqOpex != Date().yyyyqOpex[1];
        }
        else if period == "Earnings" and aggregation <= AggregationPeriod.MONTH {
            isNew = isStart or Date().lastEarnings != Date().lastEarnings[1];
        }
        else if period == "Yearly" and aggregation <= AggregationPeriod.QUARTER {
            isNew = isStart or Date().yyyy != Date().yyyy[1];
        }
        else if period == "SinceDate" {
            isNew = Date() >= since and (Date()[1] < since or isStart);
        }
        else if period == "CandlesAgo" {
            isNew = isStart and candles > endBar or BarNumber() + candles == endBar;
        }
        else {
            isNew = isStart;
        }

        def isActive = isNew or isActive[1];

        plot P = isNew;
        P.hide();
    }
###


### INPUTS ###
    input Market = {
        default "ALLUSA",
        "NYSE",
        "NASDAQ",
        "S&P 500",
        "NASDAQ 100",
        "RUSSELL 2000",
        "DJIA"
    };

    input TimeFrame = {
        default "1 Week",
        "2 Weeks",
        "1 Month",
        "3 Months",
        "6 Months",
        "1 Year"
    };

    input Quote = {
        default "Close",
        "Open",
        "High",
        "Low",
        "HL2",
        "HLC3",
        "OHLC4"
    };

    input Display = {
        default "Difference",
        "Tick",
        "Ratio",
        "Log Ratio",
        "Cumulative"
    };

    input Period = {
        default "Chart",
        "Daily",
        "Weekly",
        "Monthly",
        "MonthlyOPEX",
        "Quarterly",
        "QuarterlyOPEX",
        "Earnings",
        "Yearly",
        "CandlesAgo",
        "SinceDate"
    };

    @Date input SinceDate = 20250407;
    input CandlesAgo      = 100;
    input Separators      = yes;
    input Sanitize        = no;
    input Oscillation     = 0;
    input Smoothing       = 0;
###


### LOOKUPS ###
    def type;
    switch (Quote) {
        case "Open"  : type = FundamentalType.OPEN;
        case "High"  : type = FundamentalType.HIGH;
        case "Low"   : type = FundamentalType.LOW;
        case "HL2"   : type = FundamentalType.HL2;
        case "HLC3"  : type = FundamentalType.HLC3;
        case "OHLC4" : type = FundamentalType.OHLC4;
        default      : type = FundamentalType.CLOSE;
    }

    def rawLows;
    def rawHighs;
    switch (Market) {
        case "ALLUSA":
            switch (TimeFrame) {
                case "1 Week":
                    rawLows  = Fundamental(type, "$USLO1W");
                    rawHighs = Fundamental(type, "$USHI1W");
                case "2 Weeks":
                    rawLows  = Fundamental(type, "$USLO2W");
                    rawHighs = Fundamental(type, "$USHI2W");
                case "1 Month":
                    rawLows  = Fundamental(type, "$USLO1M");
                    rawHighs = Fundamental(type, "$USHI1M");
                case "3 Months":
                    rawLows  = Fundamental(type, "$USLO3M");
                    rawHighs = Fundamental(type, "$USHI3M");
                case "6 Months":
                    rawLows  = Fundamental(type, "$USLO6M");
                    rawHighs = Fundamental(type, "$USHI6M");
                case "1 Year":
                    rawLows  = Fundamental(type, "$USLOW");
                    rawHighs = Fundamental(type, "$USHGH");
            }
        case "NYSE":
            switch (TimeFrame) {
                case "1 Week":
                    rawLows  = Fundamental(type, "$NYLO1W");
                    rawHighs = Fundamental(type, "$NYHI1W");
                case "2 Weeks":
                    rawLows  = Fundamental(type, "$NYLO2W");
                    rawHighs = Fundamental(type, "$NYHI2W");
                case "1 Month":
                    rawLows  = Fundamental(type, "$NYLO1M");
                    rawHighs = Fundamental(type, "$NYHI1M");
                case "3 Months":
                    rawLows  = Fundamental(type, "$NYLO3M");
                    rawHighs = Fundamental(type, "$NYHI3M");
                case "6 Months":
                    rawLows  = Fundamental(type, "$NYLO6M");
                    rawHighs = Fundamental(type, "$NYHI6M");
                case "1 Year":
                    rawLows  = Fundamental(type, "$NYLOW");
                    rawHighs = Fundamental(type, "$NYHGH");
            }
        case "NASDAQ":
            switch (TimeFrame) {
                case "1 Week":
                    rawLows  = Fundamental(type, "$NALO1W");
                    rawHighs = Fundamental(type, "$NAHI1W");
                case "2 Weeks":
                    rawLows  = Fundamental(type, "$NALO2W");
                    rawHighs = Fundamental(type, "$NAHI2W");
                case "1 Month":
                    rawLows  = Fundamental(type, "$NALO1M");
                    rawHighs = Fundamental(type, "$NAHI1M");
                case "3 Months":
                    rawLows  = Fundamental(type, "$NALO3M");
                    rawHighs = Fundamental(type, "$NAHI3M");
                case "6 Months":
                    rawLows  = Fundamental(type, "$NALO6M");
                    rawHighs = Fundamental(type, "$NAHI6M");
                case "1 Year":
                    rawLows  = Fundamental(type, "$NALOW");
                    rawHighs = Fundamental(type, "$NAHGH");
            }
        case "S&P 500":
            switch (TimeFrame) {
                case "1 Week":
                    rawLows  = Fundamental(type, "$LOSP1W");
                    rawHighs = Fundamental(type, "$HISP1W");
                case "2 Weeks":
                    rawLows  = Fundamental(type, "$LOSP2W");
                    rawHighs = Fundamental(type, "$HISP2W");
                case "1 Month":
                    rawLows  = Fundamental(type, "$LOSP1M");
                    rawHighs = Fundamental(type, "$HISP1M");
                case "3 Months":
                    rawLows  = Fundamental(type, "$LOSP3M");
                    rawHighs = Fundamental(type, "$HISP3M");
                case "6 Months":
                    rawLows  = Fundamental(type, "$LOSP6M");
                    rawHighs = Fundamental(type, "$HISP6M");
                case "1 Year":
                    rawLows  = Fundamental(type, "$lOWSP");
                    rawHighs = Fundamental(type, "$HGHSP");
            }
        case "NASDAQ 100":
            switch (TimeFrame) {
                case "1 Week":
                    rawLows  = Fundamental(type, "$LOND1W");
                    rawHighs = Fundamental(type, "$HIND1W");
                case "2 Weeks":
                    rawLows  = Fundamental(type, "$LOND2W");
                    rawHighs = Fundamental(type, "$HIND2W");
                case "1 Month":
                    rawLows  = Fundamental(type, "$LOND1M");
                    rawHighs = Fundamental(type, "$HIND1M");
                case "3 Months":
                    rawLows  = Fundamental(type, "$LOND3M");
                    rawHighs = Fundamental(type, "$HIND3M");
                case "6 Months":
                    rawLows  = Fundamental(type, "$LOND6M");
                    rawHighs = Fundamental(type, "$HIND6M");
                case "1 Year":
                    rawLows  = Fundamental(type, "$LOWND");
                    rawHighs = Fundamental(type, "$HGHND");
            }
        case "RUSSELL 2000":
            switch (TimeFrame) {
                case "1 Week":
                    rawLows  = Fundamental(type, "$LORL1W");
                    rawHighs = Fundamental(type, "$HIRL1W");
                case "2 Weeks":
                    rawLows  = Fundamental(type, "$LORL2W");
                    rawHighs = Fundamental(type, "$HIRL2W");
                case "1 Month":
                    rawLows  = Fundamental(type, "$LORL1M");
                    rawHighs = Fundamental(type, "$HIRL1M");
                case "3 Months":
                    rawLows  = Fundamental(type, "$LORL3M");
                    rawHighs = Fundamental(type, "$HIRL3M");
                case "6 Months":
                    rawLows  = Fundamental(type, "$LORL6M");
                    rawHighs = Fundamental(type, "$HIRL6M");
                case "1 Year":
                    rawLows  = Fundamental(type, "$LOWRL");
                    rawHighs = Fundamental(type, "$HGHRL");
            }
        case "DJIA":
            switch (TimeFrame) {
                case "1 Week":
                    rawLows  = Fundamental(type, "$LOI1W");
                    rawHighs = Fundamental(type, "$HII1W");
                case "2 Weeks":
                    rawLows  = Fundamental(type, "$LOI2W");
                    rawHighs = Fundamental(type, "$HII2W");
                case "1 Month":
                    rawLows  = Fundamental(type, "$LOI1M");
                    rawHighs = Fundamental(type, "$HII1M");
                case "3 Months":
                    rawLows  = Fundamental(type, "$LOI3M");
                    rawHighs = Fundamental(type, "$HII3M");
                case "6 Months":
                    rawLows  = Fundamental(type, "$LOI6M");
                    rawHighs = Fundamental(type, "$HII6M");
                case "1 Year":
                    rawLows  = Fundamental(type, "$LOWI");
                    rawHighs = Fundamental(type, "$HGHI");
            }
    }

    def lows;
    def highs;
    if Sanitize {
        lows  = Value(rawLows);
        highs = Value(rawHighs);
    }
    else {
        lows  = rawLows;
        highs = rawHighs;
    }
###


### CALCULATIONS ###
    def isNewPeriod    = Periods(Period, SinceDate, CandlesAgo).isNew;
    def isActivePeriod = Periods(Period, SinceDate, CandlesAgo).isActive;

    # Tick
    def tickHighs;
    def tickLows;
    if Chart().isIntradayBar {
        tickHighs = highs - highs[1];
        tickLows  = lows  - lows[1];
    }
    else {
        tickHighs = highs;
        tickLows  = lows;
    }

    # Value
    def rawValue;
    switch (Display) {
        case "Difference" : rawValue = highs - lows;
        case "Ratio"      : rawValue = highs / lows;
        case "Log Ratio"  : rawValue = Log(highs / lows);
        default           : rawValue = tickHighs - tickLows;
    }

    def filteredValue = Filters(rawValue, Oscillation, Smoothing);

    # Cumulative
    def value;
    if !Chart().isValidBar or !isActivePeriod {
        value = Double.NaN;
    }
    else if isNewPeriod or Display != Display.Cumulative {
        value = filteredValue;
    }
    else {
        value = value[1] + filteredValue;
    }

    # Neutral
    def neutral;
    switch (Display) {
        case "Ratio" : neutral = 1;
        default      : neutral = 0;
    }
###


### PLOTS ###
    DefineGlobalColor("Line",       CreateColor(48, 48, 48));
    DefineGlobalColor("Separator",  CreateColor(32, 32, 32));
    DefineGlobalColor("Background", CreateColor(12, 12, 12));

    # Value
    plot HL = value;
    HL.DefineColor("Up", Color.UPTICK);
    HL.DefineColor("Down", Color.DOWNTICK);
    HL.DefineColor("Neutral", Color.DARK_GRAY);
    HL.SetDefaultColor(HL.Color("Neutral"));
    HL.AssignValueColor(
        if isNewPeriod and isActivePeriod[1]
            then GlobalColor("Background")
        else if HL > neutral
            then HL.Color("Up")
        else if HL < neutral
            then HL.Color("Down")
            else HL.Color("Neutral")
    );

    # Line
    plot N = neutral;
    N.SetDefaultColor(GlobalColor("Line"));
    N.HideBubble();
    N.HideTitle();
    N.Hide();

    # Separators
    AddVerticalLine(
        visible = Separators and isNewPeriod and isActivePeriod[1],
        color   = GlobalColor("Separator"),
        stroke  = Curve.SHORT_DASH,
        text    = ""
    );
###
