declare lower;
declare zerobase;


### SCRIPTS ###
    script Date {
        def yyyymmdd = GetYYYYMMDD();
        def yyyy     = GetYear();
        def mm       = GetMonth();
        def doy      = GetDay();
        def dom      = GetDayOfMonth(yyyymmdd);
        def dow      = GetDayOfWeek(yyyymmdd);
        def dowj1    = GetDayOfWeek(yyyy * 10000 + 0101);
        def ww       = GetWeek();
        def q        = Ceil(mm / 3);
        def yyyyq    = yyyy * 10 + q;
        def yyyymm   = yyyy * 100 + mm;

        def minus = if yyyy > yyyy[1] and ww >= ww[1] then 1
            else if ww != ww[1] then 0
            else minus[1];

        def yyyyww = (yyyy - minus) * 100 + ww;

        def isAfterOpex    = (dom - 14 - if dow > 5 then dow - 5 else dow + 2) > 0;
        def isEndOfQuarter = mm % 3 == 0;

        def qOpex = if q + isAfterOpex * isEndOfQuarter <= 4
            then q + isAfterOpex * isEndOfQuarter
            else 1;

        def mmOpex = if mm + isAfterOpex <= 12
            then mm + isAfterOpex
            else 1;

        def yyyyOpex = if mm + isAfterOpex <= 12
            then yyyy
            else yyyy + 1;

        def yyyyqOpex  = yyyyOpex * 10  + qOpex;
        def yyyymmOpex = yyyyOpex * 100 + mmOpex;

        def lastEarnings = if HasEarnings(EarningTime.BEFORE_MARKET) or HasEarnings(EarningTime.AFTER_MARKET)[1]
            then GetYYYYMMDD()
            else lastEarnings[1];

        plot P = yyyymmdd;
        P.hide();
    }

    script Chart {
        input Validator = "$DJI";

        def aggregation   = GetAggregationPeriod();
        def isIntraday    = aggregation <  AggregationPeriod.DAY;
        def isDaily       = aggregation == AggregationPeriod.DAY;
        def isMultiDay    = aggregation >  AggregationPeriod.DAY;
        def isIntradayBar = isIntraday and Date() == Date()[1];
        def number        = BarNumber();
        def startBar      = First(number);
        def endBar        = HighestAll(number * !IsNaN(close(Validator)));
        def isValidBar    = number between startBar and endBar;
        def startOffset   = number - startBar;
        def endOffset     = number - endBar;
        def isStart       = number == startBar;
        def isEnd         = number == endBar;

        plot P = Double.NaN;
        P.hide();
    }

    script Value {
        input raw    = 0;
        input minRaw = 0;
        input maxRaw = 0;

        def minValue = if minRaw < 0 then minRaw else -999999999999999;
        def maxValue = if maxRaw > 0 then maxRaw else  999999999999999;

        def isValid;
        if IsNaN(raw) or IsInfinite(raw) {
            isValid = no;
        }
        else {
            isValid = raw between minValue and maxValue;
        }

        def value = if isValid or !Chart().isValidBar
            then raw
            else value[1];

        plot P = value;
        P.hide();
    }

    script Filters {
        input raw         = 0;
        input oscillation = 0;
        input smoothing   = 0;

        def oscValue;
        if oscillation > 1 {
            oscValue = raw - Average(raw, oscillation);
        }
        else {
            oscValue = raw;
        }

        def value;
        if smoothing > 1 {
            value = Inertia(oscValue, smoothing);
        }
        else {
            value = oscValue;
        }

        plot P = value;
        P.Hide();
    }

    script Periods {
        input period  = "Chart";
        input since   = 20250407;
        input candles = 100;

        def isStart     = Chart().isStart;
        def endBar      = Chart().endBar;
        def aggregation = GetAggregationPeriod();

        def isNew;
        if period == "Daily" and aggregation <= AggregationPeriod.FOUR_HOURS {
            isNew = isStart or Date() != Date()[1];
        }
        else if period == "Weekly" and aggregation <= AggregationPeriod.TWO_DAYS {
            isNew = isStart or Date().yyyyww != Date().yyyyww[1];
        }
        else if period == "Monthly" and aggregation <= AggregationPeriod.WEEK {
            isNew = isStart or Date().yyyymm != Date().yyyymm[1];
        }
        else if period == "MonthlyOPEX" and aggregation <= AggregationPeriod.WEEK {
            isNew = isStart or Date().yyyymmOpex != Date().yyyymmOpex[1];
        }
        else if period == "Quarterly" and aggregation <= AggregationPeriod.MONTH {
            isNew = isStart or Date().yyyyq != Date().yyyyq[1];
        }
        else if period == "QuarterlyOPEX" and aggregation <= AggregationPeriod.MONTH {
            isNew = isStart or Date().yyyyqOpex != Date().yyyyqOpex[1];
        }
        else if period == "Earnings" and aggregation <= AggregationPeriod.MONTH {
            isNew = isStart or Date().lastEarnings != Date().lastEarnings[1];
        }
        else if period == "Yearly" and aggregation <= AggregationPeriod.QUARTER {
            isNew = isStart or Date().yyyy != Date().yyyy[1];
        }
        else if period == "SinceDate" {
            isNew = Date() >= since and (Date()[1] < since or isStart);
        }
        else if period == "CandlesAgo" {
            isNew = isStart and candles > endBar or BarNumber() + candles == endBar;
        }
        else {
            isNew = isStart;
        }

        def isActive = isNew or isActive[1];

        plot P = isNew;
        P.hide();
    }
###


### INPUTS ###
    input Source = {
        default "Ticker",
        "ALLUSA",
        "NYSE",
        "NASDAQ",
        "S&P 500",
        "NASDAQ 100",
        "RUSSELL 2000",
        "DJIA"
    };

    input Ticker = "";

    input Display = {
        default "Relative",
        "Absolute"
    };

    input Length     = 20;
    input Deviations = 2.0;
    input Negative   = yes;
    input Sanitize   = no;
    input Smoothing  = 0;
###


### LOOKUPS ###
    # Lookup
    def rawVolume;
    def rawClose;
    switch (Source) {
        case "ALLUSA":
            rawVolume = close("$TVOLUS") * 1000;
            rawClose  = close("$DWCF");
        case "NYSE":
            rawVolume = close("$TVOL") * 1000;
            rawClose  = close("NYA");
        case "NASDAQ":
            rawVolume = close("$TVOL/Q") * 1000;
            rawClose  = close("$COMP");
        case "S&P 500":
            rawVolume = close("$TVOLSP") * 1000;
            rawClose  = close("SPX");
        case "NASDAQ 100":
            rawVolume = close("$TVOLND") * 1000;
            rawClose  = close("NDX");
        case "RUSSELL 2000":
            rawVolume = close("$TVOLRL") * 1000;
            rawClose  = close("RUT");
        case "DJIA":
            rawVolume = close("$TVOLI") * 1000;
            rawClose  = close("$DJI");
        default:
            if Ticker != "" {
                rawVolume = volume(Ticker);
                rawClose  = close(Ticker);
            }
            else {
                rawVolume = volume;
                rawClose  = close;
            }
    }

    # Sanitize
    def dataVolume;
    def dataClose;
    if Sanitize {
        dataVolume = Value(rawVolume);
        dataClose  = Value(rawClose);
    }
    else {
        dataVolume = rawVolume;
        dataClose  = rawClose;
    }
###


### CALCULATIONS ###
    # Internals
    def tickVolume;
    if Chart().isIntradayBar and Source != Source.Ticker {
        tickVolume = dataVolume - dataVolume[1];
    }
    else {
        tickVolume = dataVolume;
    }

    # Relative
    def oscVolume  = Filters(tickVolume, Length, Smoothing);
    def volumeDevs = StDev(tickVolume, Length);
    def relVolume  = if !Negative
        then Max(0, oscVolume / volumeDevs)
        else oscVolume / volumeDevs;
###


### PLOTS ###
    DefineGlobalColor("Line",       CreateColor(48, 48, 48));
    DefineGlobalColor("Separator",  CreateColor(32, 32, 32));
    DefineGlobalColor("Background", CreateColor(12, 12, 12));

    # Absolute
    plot AV = tickVolume;
    AV.SetHiding(Display != Display.Absolute);
    AV.SetPaintingStrategy(PaintingStrategy.HISTOGRAM);
    AV.DefineColor("Normal", CreateColor(72, 72, 72));
    AV.DefineColor("Abnormal", Color.GRAY);
    AV.AssignValueColor(
        if relVolume >= Deviations
            then AV.Color("Abnormal")
            else AV.Color("Normal")
    );

    # Relative
    plot RV = relVolume;
    RV.SetHiding(Display != Display.Relative);
    RV.SetPaintingStrategy(PaintingStrategy.HISTOGRAM);
    RV.DefineColor("AbnormalUp", Color.UPTICK);
    RV.DefineColor("AbnormalDn", Color.DOWNTICK);
    RV.DefineColor("Abnormal", Color.LIGHT_GRAY);
    RV.DefineColor("Positive", Color.GRAY);
    RV.DefineColor("Negative", CreateColor(72, 72, 72));
    RV.AssignValueColor(
        if relVolume >= Deviations and dataClose > dataClose[1]
            then RV.Color("AbnormalUp")
        else if relVolume >= Deviations and dataClose < dataClose[1]
            then RV.Color("AbnormalDn")
        else if relVolume >= Deviations
            then RV.Color("Abnormal")
        else if relVolume > 0
            then RV.Color("Positive")
            else RV.Color("Negative")
    );

    # Lines
    plot D = Deviations;
    D.SetHiding(Display != Display.Relative);
    D.SetDefaultColor(GlobalColor("Line"));
    D.HideBubble();
    D.HideTitle();

    plot N = 0;
    N.SetDefaultColor(GlobalColor("Line"));
    N.HideBubble();
    N.HideTitle();
    N.Hide();
###
