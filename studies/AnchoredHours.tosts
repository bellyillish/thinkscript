declare lower;
declare real_size;


### SCRIPTS ###
    script Date {
        def yyyymmdd = GetYYYYMMDD();
        def yyyy     = GetYear();
        def mm       = GetMonth();
        def doy      = GetDay();
        def dom      = GetDayOfMonth(yyyymmdd);
        def dow      = GetDayOfWeek(yyyymmdd);
        def dowj1    = GetDayOfWeek(yyyy * 10000 + 0101);
        def ww       = Ceil((doy + 1 + if dowj1 >= 5 then dowj1 - 7 else dowj1) / 7);
        def q        = Ceil(mm / 3);
        def yyyyq    = yyyy * 10 + q;
        def yyyymm   = yyyy * 100 + mm;
        def yyyyww   = yyyy * 100 + ww;

        def isAfterOpex    = (dom - 14 - if dow > 5 then dow - 5 else dow + 2) > 0;
        def isEndOfQuarter = mm % 3 == 0;

        def qOpex = if q + isAfterOpex * isEndOfQuarter <= 4
            then q + isAfterOpex * isEndOfQuarter
            else 1;

        def mmOpex = if mm + isAfterOpex <= 12
            then mm + isAfterOpex
            else 1;

        def yyyyOpex = if mm + isAfterOpex <= 12
            then yyyy
            else yyyy + 1;

        def yyyyqOpex  = yyyyOpex * 10  + qOpex;
        def yyyymmOpex = yyyyOpex * 100 + mmOpex;

        plot P = yyyymmdd;
        P.hide();
    }

    script Chart {
        def aggregation   = GetAggregationPeriod();
        def isIntraday    = aggregation <  AggregationPeriod.DAY;
        def isDaily       = aggregation == AggregationPeriod.DAY;
        def isMultiDay    = aggregation >  AggregationPeriod.DAY;
        def isIntradayBar = isIntraday and Date() == Date()[1];
        def number        = BarNumber();
        def startBar      = First(number);
        def endBar        = HighestAll(number * !IsNaN(close));
        def isValidBar    = number between startBar and endBar;
        def startOffset   = number - startBar;
        def endOffset     = number - endBar;
        def isStart       = number == startBar;
        def isEnd         = number == endBar;

        plot P = Double.NaN;
        P.hide();
    }

    script Value {
        input raw    = 0;
        input minRaw = 0;
        input maxRaw = 0;

        def minValue = if minRaw < 0 then minRaw else -999999999999999;
        def maxValue = if maxRaw > 0 then maxRaw else  999999999999999;

        def isValid;
        if IsNaN(raw) or IsInfinite(raw) {
            isValid = no;
        }
        else {
            isValid = raw between minValue and maxValue;
        }

        def value = if isValid or !Chart().isValidBar
            then raw
            else value[1];

        plot P = Double.NaN;
        P.hide();
    }

    script Periods {
        input period  = "Chart";
        input since   = 20250407;
        input candles = 100;

        def isStart     = Chart().isStart;
        def endBar      = Chart().endBar;
        def aggregation = GetAggregationPeriod();

        def isNew;
        if period == "Daily" and aggregation <= AggregationPeriod.FOUR_HOURS {
            isNew = isStart or Date() != Date()[1];
        }
        else if period == "Weekly" and aggregation <= AggregationPeriod.TWO_DAYS {
            isNew = isStart or Date().yyyyww != Date().yyyyww[1];
        }
        else if period == "Monthly" and aggregation <= AggregationPeriod.WEEK {
            isNew = isStart or Date().yyyymm != Date().yyyymm[1];
        }
        else if period == "MonthlyOPEX" and aggregation <= AggregationPeriod.WEEK {
            isNew = isStart or Date().yyyymmOpex != Date().yyyymmOpex[1];
        }
        else if period == "Quarterly" and aggregation <= AggregationPeriod.MONTH {
            isNew = isStart or Date().yyyyq != Date().yyyyq[1];
        }
        else if period == "QuarterlyOPEX" and aggregation <= AggregationPeriod.MONTH{
            isNew = isStart or Date().yyyyqOpex != Date().yyyyqOpex[1];
        }
        else if period == "Yearly" and aggregation <= AggregationPeriod.QUARTER {
            isNew = isStart or Date().yyyy != Date().yyyy[1];
        }
        else if period == "SinceDate" {
            isNew = Date() >= since and (Date()[1] < since or isStart);
        }
        else if period == "CandlesAgo" {
            isNew = isStart and candles > endBar or BarNumber() + candles == endBar;
        }
        else {
            isNew = isStart;
        }

        def isActive = isNew or isActive[1];

        plot P = isNew;
        P.hide();
    }
###


### INPUTS ###
    input Ticker = "";

    input Display = {
        default "Summation",
        "Overlay",
        "Cloud",
        "Ratio"
    };

    input Scale = {
        default "Logarithmic",
        "Relative",
        "Absolute"
    };

    input Oscillation = 0;
    input Smoothing   = 0;
    input Sanitize    = no;

    input Period = {
        default "Chart",
        "Daily",
        "Weekly",
        "Monthly",
        "MonthlyOPEX",
        "Quarterly",
        "QuarterlyOPEX",
        "Yearly",
        "CandlesAgo",
        "SinceDate"
    };

    @Date input SinceDate = 20250407;
    input CandlesAgo      = 100;
    input Separators      = yes;
###


### LOOKUPS ###
    def rawOpen;
    def rawClose;
    if Ticker != "" {
        rawOpen  = open(Ticker);
        rawClose = close(Ticker);
    }
    else {
        rawOpen  = open(GetSymbol());
        rawClose = close(GetSymbol());
    }

    # Sanitize
    def cleanOpen;
    def cleanClose;
    if Sanitize {
        cleanOpen  = Value(rawOpen).value;
        cleanClose = Value(rawClose).value;
    }
    else {
        cleanOpen  = rawOpen;
        cleanClose = rawClose;
    }

    # Logarithmic
    def dataOpen;
    def dataClose;
    if Scale == Scale.Logarithmic {
        dataOpen  = Log(cleanOpen);
        dataClose = Log(cleanClose);
    }
    else {
        dataOpen  = cleanOpen;
        dataClose = cleanClose;
    }
###


### CALCULATIONS ###
    def isNewPeriod    = Periods(Period, SinceDate, CandlesAgo).isNew;
    def isActivePeriod = Periods(Period, SinceDate, CandlesAgo).isActive;

    # Bar start
    def endRTH   = dataClose;
    def startETH = dataClose[1];

    def startRTH;
    def endETH;
    if Chart().isIntradayBar {
        startRTH = dataClose[1];
        endETH   = dataClose[1];
    }
    else if !Chart().isMultiDay {
        startRTH = dataOpen;
        endETH   = dataOpen;
    }
    else {
        startRTH = dataClose[1];
        endETH   = dataClose;
    }

    # Change
    def rawChangeRTH;
    def rawChangeETH;
    if Scale == Scale.Relative {
        rawChangeRTH = endRTH / startRTH - 1;
        rawChangeETH = endETH / startETH - 1;
    }
    else {
        rawChangeRTH = endRTH - startRTH;
        rawChangeETH = endETH - startETH;
    }

    # Oscillate
    def oscRTH;
    def oscETH;
    if Oscillation > 1 {
        oscRTH = rawChangeRTH - Average(rawChangeRTH, Oscillation);
        oscETH = rawChangeETH - Average(rawChangeETH, Oscillation);
    }
    else {
        oscRTH = rawChangeRTH;
        oscETH = rawChangeETH;
    }

    # Smoothing
    def changeRTH;
    def changeETH;
    if Smoothing > 1 {
        changeRTH = Inertia(oscRTH, Smoothing);
        changeETH = Inertia(oscETH, Smoothing);
    }
    else {
        changeRTH = oscRTH;
        changeETH = oscETH;
    }

    # Summation
    def rawSumRTH;
    def rawSumETH;
    if !Chart().isValidBar or !isActivePeriod {
        rawSumRTH = Double.NaN;
        rawSumETH = Double.NaN;
    }
    else if isNewPeriod and Scale == Scale.Relative {
        rawSumRTH = changeRTH + 1;
        rawSumETH = changeETH + 1;
    }
    else if isNewPeriod {
        rawSumRTH = changeRTH;
        rawSumETH = changeETH;
    }
    else if Scale == Scale.Relative {
        rawSumRTH = rawSumRTH[1] * (changeRTH + 1);
        rawSumETH = rawSumETH[1] * (changeETH + 1);
    }
    else {
        rawSumRTH = rawSumRTH[1] + changeRTH;
        rawSumETH = rawSumETH[1] + changeETH;
    }

    # Relative summation
    def change;
    def sumRTH;
    def sumETH;
    def summation;
    if Scale == Scale.Relative {
        change    = (changeRTH + 1) / (changeETH + 1) - 1;
        summation = (rawSumRTH + 1) / (rawSumETH + 1) - 1;
        sumRTH    = rawSumRTH - 1;
        sumETH    = rawSumETH - 1;
    }
    else {
        change    = changeRTH - changeETH;
        summation = rawSumRTH - rawSumETH;
        sumRTH    = rawSumRTH;
        sumETH    = rawSumETH;
    }
###


### PLOTS ###
    DefineGlobalColor("Line",       CreateColor(48, 48, 48));
    DefineGlobalColor("Separator",  CreateColor(32, 32, 32));
    DefineGlobalColor("Background", CreateColor(12, 12, 12));

    # Summation
    plot S = summation;
    S.SetHiding(Display != Display.Summation);
    S.DefineColor("Up", CreateColor(255, 184, 77));
    S.DefineColor("Down", CreateColor(77, 166, 255));
    S.DefineColor("Neutral", Color.DARK_GRAY);
    S.SetDefaultColor(S.Color("Neutral"));
    S.AssignValueColor(
        if isNewPeriod and isActivePeriod[1]
            then GlobalColor("Background")
        else if summation > 0
            then S.Color("Up")
        else if summation < 0
            then S.Color("Down")
            else S.Color("Neutral")
    );

    # Difference/ratio
    plot Ratio = change;
    Ratio.SetHiding(Display != Display.Ratio);
    Ratio.SetPaintingStrategy(PaintingStrategy.HISTOGRAM);
    Ratio.DefineColor("Up", CreateColor(255, 184, 77));
    Ratio.DefineColor("Down", CreateColor(77, 166, 255));
    Ratio.DefineColor("Neutral", Color.DARK_GRAY);
    Ratio.SetDefaultColor(Ratio.Color("Neutral"));
    Ratio.AssignValueColor(
        if change > 0
            then Ratio.Color("Up")
        else if change < 0
            then Ratio.Color("Down")
            else Ratio.Color("Neutral")
    );

    # RTH
    plot RTH = sumRTH;
    RTH.SetHiding(Display != Display.Overlay and Display != Display.Cloud);
    RTH.DefineColor("Value", CreateColor(255, 184, 77));
    RTH.SetDefaultColor(RTH.Color("Value"));
    RTH.AssignValueColor(
        if isNewPeriod and Display != Display.Cloud
            then GlobalColor("Background")
            else RTH.Color("Value")
    );

    # ETH
    plot ETH = sumETH;
    ETH.SetHiding(Display != Display.Overlay and Display != Display.Cloud);
    ETH.DefineColor("Value", CreateColor(77, 166, 255));
    ETH.SetDefaultColor(ETH.Color("Value"));
    ETH.AssignValueColor(
        if isNewPeriod and Display != Display.Cloud
            then GlobalColor("Background")
            else ETH.Color("Value")
    );

    # Cloud
    def cloudRTH = sumRTH;
    def cloudETH = sumETH;
    AddCloud(
        data1  = if Display == Display.Cloud then cloudRTH else Double.NaN,
        data2  = if Display == Display.Cloud then cloudETH else Double.NaN,
        color1 = RTH.Color("Value"),
        color2 = ETH.Color("Value")
    );

    # Mid
    plot Mid = 0;
    Mid.SetDefaultColor(GlobalColor("Line"));
    Mid.HideBubble();
    Mid.HideTitle();

    # Separators
    AddVerticalLine(
        visible = Separators and isNewPeriod and isActivePeriod[1],
        color   = GlobalColor("Separator"),
        stroke  = Curve.SHORT_DASH,
        text    = ""
    );
###
