declare lower;


### SCRIPTS ###
    script Date {
        def yyyymmdd = GetYYYYMMDD();
        def yyyy     = GetYear();
        def mm       = GetMonth();
        def doy      = GetDay();
        def dom      = GetDayOfMonth(yyyymmdd);
        def dow      = GetDayOfWeek(yyyymmdd);
        def dowj1    = GetDayOfWeek(yyyy * 10000 + 0101);
        def ww       = Ceil((doy + 1 + if dowj1 >= 5 then dowj1 - 7 else dowj1) / 7);
        def q        = Ceil(mm / 3);
        def yyyyq    = yyyy * 10 + q;
        def yyyymm   = yyyy * 100 + mm;
        def yyyyww   = yyyy * 100 + ww;

        def isAfterOpex    = (dom - 14 - if dow > 5 then dow - 5 else dow + 2) > 0;
        def isEndOfQuarter = mm % 3 == 0;

        def qOpex = if q + isAfterOpex * isEndOfQuarter <= 4
            then q + isAfterOpex * isEndOfQuarter
            else 1;

        def mmOpex = if mm + isAfterOpex <= 12
            then mm + isAfterOpex
            else 1;

        def yyyyOpex = if mm + isAfterOpex <= 12
            then yyyy
            else yyyy + 1;

        def yyyyqOpex  = yyyyOpex * 10  + qOpex;
        def yyyymmOpex = yyyyOpex * 100 + mmOpex;

        plot P = yyyymmdd;
        P.hide();
    }

    script Chart {
        input Validator = "$DJI";

        def aggregation   = GetAggregationPeriod();
        def isIntraday    = aggregation <  AggregationPeriod.DAY;
        def isDaily       = aggregation == AggregationPeriod.DAY;
        def isMultiDay    = aggregation >  AggregationPeriod.DAY;
        def isIntradayBar = isIntraday and Date() == Date()[1];
        def number        = BarNumber();
        def startBar      = First(number);
        def endBar        = HighestAll(number * !IsNaN(close(Validator)));
        def isValidBar    = number between startBar and endBar;
        def startOffset   = number - startBar;
        def endOffset     = number - endBar;
        def isStart       = number == startBar;
        def isEnd         = number == endBar;

        plot P = Double.NaN;
        P.hide();
    }

    script Value {
        input raw    = 0;
        input minRaw = 0;
        input maxRaw = 0;

        def minValue = if minRaw < 0 then minRaw else -999999999999999;
        def maxValue = if maxRaw > 0 then maxRaw else  999999999999999;

        def isValid;
        if IsNaN(raw) or IsInfinite(raw) {
            isValid = no;
        }
        else {
            isValid = raw between minValue and maxValue;
        }

        def value = if isValid or !Chart().isValidBar
            then raw
            else value[1];

        plot P = Double.NaN;
        P.hide();
    }

    script Periods {
        input period  = "Chart";
        input since   = 20250407;
        input candles = 100;

        def isStart     = Chart().isStart;
        def endBar      = Chart().endBar;
        def aggregation = GetAggregationPeriod();

        def isNew;
        if period == "Daily" and aggregation <= AggregationPeriod.FOUR_HOURS {
            isNew = isStart or Date() != Date()[1];
        }
        else if period == "Weekly" and aggregation <= AggregationPeriod.TWO_DAYS {
            isNew = isStart or Date().yyyyww != Date().yyyyww[1];
        }
        else if period == "Monthly" and aggregation <= AggregationPeriod.WEEK {
            isNew = isStart or Date().yyyymm != Date().yyyymm[1];
        }
        else if period == "MonthlyOPEX" and aggregation <= AggregationPeriod.WEEK {
            isNew = isStart or Date().yyyymmOpex != Date().yyyymmOpex[1];
        }
        else if period == "Quarterly" and aggregation <= AggregationPeriod.MONTH {
            isNew = isStart or Date().yyyyq != Date().yyyyq[1];
        }
        else if period == "QuarterlyOPEX" and aggregation <= AggregationPeriod.MONTH{
            isNew = isStart or Date().yyyyqOpex != Date().yyyyqOpex[1];
        }
        else if period == "Yearly" and aggregation <= AggregationPeriod.QUARTER {
            isNew = isStart or Date().yyyy != Date().yyyy[1];
        }
        else if period == "SinceDate" {
            isNew = Date() >= since and (Date()[1] < since or isStart);
        }
        else if period == "CandlesAgo" {
            isNew = isStart and candles > endBar or BarNumber() + candles == endBar;
        }
        else {
            isNew = isStart;
        }

        def isActive = isNew or isActive[1];

        plot P = isNew;
        P.hide();
    }
###


### INPUTS ###
    input Market = {
        default "ALLUSA",
        "NYSE",
        "NASDAQ",
        "S&P 500",
        "NASDAQ 100",
        "RUSSELL 2000",
        "DJIA"
    };

    input Quote = {
        default "Close",
        "Open",
        "High",
        "Low",
        "HL2",
        "HLC3",
        "OHLC4",
        "RTH",
        "ETH"
    };

    input Display = {
        default "Difference",
        "Summation",
        "Ratio"
    };

    input Period = {
        default "Chart",
        "Daily",
        "Weekly",
        "Monthly",
        "MonthlyOPEX",
        "Quarterly",
        "QuarterlyOPEX",
        "Yearly",
        "CandlesAgo",
        "SinceDate"
    };

    @Date input SinceDate = 20250407;
    input CandlesAgo      = 100;
    input Separators      = yes;
    input Sanitize        = no;
    input Oscillation     = 0;
    input Smoothing       = 0;
###


### LOOKUPS ###
    def type;
    switch (Quote) {
        case "Open"  : type = FundamentalType.OPEN;
        case "High"  : type = FundamentalType.HIGH;
        case "Low"   : type = FundamentalType.LOW;
        case "HL2"   : type = FundamentalType.HL2;
        case "HLC3"  : type = FundamentalType.HLC3;
        case "OHLC4" : type = FundamentalType.OHLC4;
        default      : type = FundamentalType.CLOSE;
    }

    def rawOpen;
    def rawClose;
    def rawTotal;
    switch (Market) {
        case "ALLUSA":
            rawOpen  = open("$ADUSD");
            rawClose = Fundamental(type, "$ADUSD");
            rawTotal = HighestAll(close("$ADVUS") + close("$DECLUS") + close("$UNCHUS"));
        case "NYSE":
            rawOpen  = open("$ADD");
            rawClose = Fundamental(type, "$ADD");
            rawTotal = HighestAll(close("$ADVN") + close("$DECN") + close("$UNCN"));
        case "NASDAQ":
            rawOpen  = open("$ADQD");
            rawClose = Fundamental(type, "$ADQD");
            rawTotal = HighestAll(close("$ADVN/Q") + close("$DECN/Q") + close("$UNCN/Q"));
        case "S&P 500":
            rawOpen  = open("$ADSPD");
            rawClose = Fundamental(type, "$ADSPD");
            rawTotal = HighestAll(close("$ADVSP") + close("$DECLSP") + close("$UNCHSP"));
        case "NASDAQ 100":
            rawOpen  = open("$ADNDD");
            rawClose = Fundamental(type, "$ADNDD");
            rawTotal = HighestAll(close("$ADVND") + close("$DECLND") + close("$UNCHND"));
        case "RUSSELL 2000":
            rawOpen  = open("$ADRLD");
            rawClose = Fundamental(type, "$ADRLD");
            rawTotal = HighestAll(close("$ADVRL") + close("$DECLRL") + close("$UNCHRL"));
        case "DJIA":
            rawOpen  = open("$ADID");
            rawClose = Fundamental(type, "$ADID");
            rawTotal = HighestAll(close("$ADVI") + close("$DECLI") + close("$UNCHI"));
    }

    # Sanitize
    def dataOpen;
    def dataClose;
    def dataTotal;
    if Sanitize {
        dataOpen  = Value(rawOpen).value;
        dataClose = Value(rawClose).value;
        dataTotal = Value(rawTotal).value;
    }
    else {
        dataOpen  = rawOpen;
        dataClose = rawClose;
        dataTotal = rawTotal;
    }
###


### CALCULATIONS ###
    def isActivePeriod = Periods(Period, SinceDate, CandlesAgo).isActive;
    def isNewPeriod    = Periods(Period, SinceDate, CandlesAgo).isNew;

    # Difference
    def rawDiff;
    if Chart().isIntradayBar and Quote == Quote.ETH {
        rawDiff = rawDiff[1];
    }
    else if Chart().isIntradayBar {
        rawDiff = dataClose - dataClose[1];
    }
    else if Quote == Quote.ETH and !Chart().isMultiDay {
        rawDiff = dataOpen - dataClose[1];
    }
    else if Quote == Quote.RTH and !Chart().isMultiDay {
        rawDiff = dataClose - dataOpen;
    }
    else {
        rawDiff = dataClose;
    }

    # Ratio
    def rawChange;
    def total;
    if Display == Display.Ratio {
        rawChange = rawDiff / dataTotal;
        total     = 1;
    }
    else {
        rawChange = rawDiff;
        total     = dataTotal;
    }

    # Oscillation
    def oscChange;
    if Oscillation > 1 {
        oscChange = rawChange - Average(rawChange, Oscillation);
    }
    else {
        oscChange = rawChange;
    }

    # Smoothing
    def change;
    if Smoothing > 1 {
        change = Inertia(oscChange, Smoothing);
    }
    else {
        change = oscChange;
    }

    # Summation
    def summation;
    if !Chart().isValidBar or !isActivePeriod {
        summation = Double.NaN;
    }
    else if isNewPeriod or IsNaN(summation[1]) {
        summation = change;
    }
    else if Chart().isIntradayBar and Quote == Quote.ETH {
        summation = summation[1];
    }
    else {
        summation = summation[1] + change;
    }
###


### PLOTS ###
    DefineGlobalColor("Line",       CreateColor(48, 48, 48));
    DefineGlobalColor("Separator",  CreateColor(32, 32, 32));
    DefineGlobalColor("Background", CreateColor(12, 12, 12));

    # Summation
    plot S = summation;
    S.SetHiding(Display != Display.Summation);
    S.DefineColor("Up", Color.UPTICK);
    S.DefineColor("Down", Color.DOWNTICK);
    S.DefineColor("Neutral", Color.DARK_GRAY);
    S.SetDefaultColor(S.Color("Neutral"));
    S.AssignValueColor(
        if isNewPeriod and isActivePeriod[1]
            then GlobalColor("Background")
        else if summation > 0
            then S.Color("Up")
        else if summation < 0
            then S.Color("Down")
            else S.Color("Neutral")
    );

    # Difference/ratio
    plot C = change;
    C.SetHiding(Display == Display.Summation);
    C.DefineColor("Up", Color.UPTICK);
    C.DefineColor("Down", Color.DOWNTICK);
    C.DefineColor("Neutral", Color.DARK_GRAY);
    C.SetDefaultColor(C.Color("Neutral"));
    C.AssignValueColor(
        if change > 0
            then C.Color("Up")
        else if change < 0
            then C.Color("Down")
            else C.Color("Neutral")
    );

    # Top
    plot Top = total;
    Top.SetDefaultColor(GlobalColor("Line"));
    Top.SetPaintingStrategy(PaintingStrategy.DASHES);
    Top.HideBubble();
    Top.Hide();

    # Mid
    plot Mid = 0;
    Mid.SetDefaultColor(GlobalColor("Line"));
    Mid.HideBubble();
    Mid.HideTitle();

    # Bottom
    plot Bottom = -total;
    Bottom.SetDefaultColor(GlobalColor("Line"));
    Bottom.SetPaintingStrategy(PaintingStrategy.DASHES);
    Bottom.HideBubble();
    Bottom.Hide();

    # Separators
    AddVerticalLine(
        visible = Separators and isNewPeriod and isActivePeriod[1],
        color   = GlobalColor("Separator"),
        stroke  = Curve.SHORT_DASH,
        text    = ""
    );
###
