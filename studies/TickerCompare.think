declare lower;
declare real_size;


### SCRIPTS ###
    script Date {
        def yyyymmdd = GetYYYYMMDD();
        def yyyy     = GetYear();
        def mm       = GetMonth();
        def doy      = GetDay();
        def dom      = GetDayOfMonth(yyyymmdd);
        def dow      = GetDayOfWeek(yyyymmdd);
        def dowj1    = GetDayOfWeek(yyyy * 10000 + 0101);
        def ww       = GetWeek();
        def q        = Ceil(mm / 3);
        def yyyyq    = yyyy * 10 + q;
        def yyyymm   = yyyy * 100 + mm;

        def minus = if yyyy > yyyy[1] and ww >= ww[1] then 1
            else if ww != ww[1] then 0
            else minus[1];

        def yyyyww = (yyyy - minus) * 100 + ww;

        def isAfterOpex    = (dom - 14 - if dow > 5 then dow - 5 else dow + 2) > 0;
        def isEndOfQuarter = mm % 3 == 0;

        def qOpex = if q + isAfterOpex * isEndOfQuarter <= 4
            then q + isAfterOpex * isEndOfQuarter
            else 1;

        def mmOpex = if mm + isAfterOpex <= 12
            then mm + isAfterOpex
            else 1;

        def yyyyOpex = if mm + isAfterOpex <= 12
            then yyyy
            else yyyy + 1;

        def yyyyqOpex  = yyyyOpex * 10  + qOpex;
        def yyyymmOpex = yyyyOpex * 100 + mmOpex;

        def lastEarnings = if HasEarnings(EarningTime.BEFORE_MARKET) or HasEarnings(EarningTime.AFTER_MARKET)[1]
            then GetYYYYMMDD()
            else lastEarnings[1];

        plot P = yyyymmdd;
        P.hide();
    }

    script Chart {
        input Validator = "$DJI";

        def aggregation   = GetAggregationPeriod();
        def isIntraday    = aggregation <  AggregationPeriod.DAY;
        def isDaily       = aggregation == AggregationPeriod.DAY;
        def isMultiDay    = aggregation >  AggregationPeriod.DAY;
        def isIntradayBar = isIntraday and Date() == Date()[1];
        def number        = BarNumber();
        def startBar      = First(number);
        def endBar        = HighestAll(number * !IsNaN(close(Validator)));
        def isValidBar    = number between startBar and endBar;
        def startOffset   = number - startBar;
        def endOffset     = number - endBar;
        def isStart       = number == startBar;
        def isEnd         = number == endBar;

        plot P = Double.NaN;
        P.hide();
    }

    script Value {
        input raw    = 0;
        input minRaw = 0;
        input maxRaw = 0;

        def minValue = if minRaw < 0 then minRaw else -999999999999999;
        def maxValue = if maxRaw > 0 then maxRaw else  999999999999999;

        def isValid;
        if IsNaN(raw) or IsInfinite(raw) {
            isValid = no;
        }
        else {
            isValid = raw between minValue and maxValue;
        }

        def value = if isValid or !Chart().isValidBar
            then raw
            else value[1];

        plot P = value;
        P.hide();
    }

    script Filters {
        input raw         = 0;
        input oscillation = 0;
        input smoothing   = 0;

        def oscValue;
        if oscillation > 1 {
            oscValue = raw - Average(raw, oscillation);
        }
        else {
            oscValue = raw;
        }

        def value;
        if smoothing > 1 {
            value = Inertia(oscValue, smoothing);
        }
        else {
            value = oscValue;
        }

        plot P = value;
        P.Hide();
    }

    script Periods {
        input period  = "Chart";
        input since   = 20250407;
        input candles = 100;

        def isStart     = Chart().isStart;
        def endBar      = Chart().endBar;
        def aggregation = GetAggregationPeriod();

        def isNew;
        if period == "Daily" and aggregation <= AggregationPeriod.FOUR_HOURS {
            isNew = isStart or Date() != Date()[1];
        }
        else if period == "Weekly" and aggregation <= AggregationPeriod.TWO_DAYS {
            isNew = isStart or Date().yyyyww != Date().yyyyww[1];
        }
        else if period == "Monthly" and aggregation <= AggregationPeriod.WEEK {
            isNew = isStart or Date().yyyymm != Date().yyyymm[1];
        }
        else if period == "MonthlyOPEX" and aggregation <= AggregationPeriod.WEEK {
            isNew = isStart or Date().yyyymmOpex != Date().yyyymmOpex[1];
        }
        else if period == "Quarterly" and aggregation <= AggregationPeriod.MONTH {
            isNew = isStart or Date().yyyyq != Date().yyyyq[1];
        }
        else if period == "QuarterlyOPEX" and aggregation <= AggregationPeriod.MONTH {
            isNew = isStart or Date().yyyyqOpex != Date().yyyyqOpex[1];
        }
        else if period == "Earnings" and aggregation <= AggregationPeriod.MONTH {
            isNew = isStart or Date().lastEarnings != Date().lastEarnings[1];
        }
        else if period == "Yearly" and aggregation <= AggregationPeriod.QUARTER {
            isNew = isStart or Date().yyyy != Date().yyyy[1];
        }
        else if period == "SinceDate" {
            isNew = Date() >= since and (Date()[1] < since or isStart);
        }
        else if period == "CandlesAgo" {
            isNew = isStart and candles > endBar or BarNumber() + candles == endBar;
        }
        else {
            isNew = isStart;
        }

        def isActive = isNew or isActive[1];

        plot P = isNew;
        P.hide();
    }
###


### INPUTS ###
    input TickerOne = "";
    input TickerTwo = "SPY";

    input Quote = {
        default "Close",
        "Open",
        "High",
        "Low",
        "HL2",
        "HLC3",
        "OHLC4",
        "VWAP",
        "One",
        "Two"
    };

    input Mode = {
        default "Combined",
        "Separate",
        "Cloud"
    };

    input Display = {
        default "Logarithmic",
        "Relative",
        "Absolute",
        "Tick"
    };

    input Period = {
        default "Chart",
        "Daily",
        "Weekly",
        "Monthly",
        "MonthlyOPEX",
        "Quarterly",
        "QuarterlyOPEX",
        "Earnings",
        "Yearly",
        "CandlesAgo",
        "SinceDate"
    };

    @Date input SinceDate = 20250407;
    input CandlesAgo      = 100;
    input Separators      = yes;
    input Sanitize        = no;
    input Oscillation     = 0;
    input Smoothing       = 0;
###


### LOOKUPS ###
    def type;
    switch (Quote) {
        case "Open"  : type = FundamentalType.OPEN;
        case "High"  : type = FundamentalType.HIGH;
        case "Low"   : type = FundamentalType.LOW;
        case "HL2"   : type = FundamentalType.HL2;
        case "HLC3"  : type = FundamentalType.HLC3;
        case "OHLC4" : type = FundamentalType.OHLC4;
        case "VWAP"  : type = FundamentalType.VWAP;
        default      : type = FundamentalType.CLOSE;
    }

    def rawOpenOne;
    def rawOpenTwo;
    def rawCloseOne;
    def rawCloseTwo;
    if TickerOne != "" {
        rawOpenOne  = open(TickerOne);
        rawOpenTwo  = open(TickerTwo);
        rawCloseOne = Fundamental(type, TickerOne);
        rawCloseTwo = Fundamental(type, TickerTwo);
    }
    else {
        rawOpenOne  = open;
        rawOpenTwo  = open(TickerTwo);
        rawCloseOne = Fundamental(type);
        rawCloseTwo = Fundamental(type, TickerTwo);
    }

    # Sanitize
    def dataOpenOne;
    def dataOpenTwo;
    def dataCloseOne;
    def dataCloseTwo;
    if Sanitize {
        dataOpenOne  = Value(rawOpenOne);
        dataOpenTwo  = Value(rawOpenTwo);
        dataCloseOne = Value(rawCloseOne);
        dataCloseTwo = Value(rawCloseTwo);
    }
    else {
        dataOpenOne  = rawOpenOne;
        dataOpenTwo  = rawOpenTwo;
        dataCloseOne = rawCloseOne;
        dataCloseTwo = rawCloseTwo;
    }
###


### CALCULATIONS ###
    def isNewPeriod    = Periods(Period, SinceDate, CandlesAgo).isNew;
    def isActivePeriod = Periods(Period, SinceDate, CandlesAgo).isActive;

    # Logarithmic
    def logOpenOne;
    def logOpenTwo;
    def logCloseOne;
    def logCloseTwo;
    if Display == Display.Logarithmic {
        logOpenOne  = Log(dataOpenOne);
        logOpenTwo  = Log(dataOpenTwo);
        logCloseOne = Log(dataCloseOne);
        logCloseTwo = Log(dataCloseTwo);
    }
    else {
        logOpenOne  = dataOpenOne;
        logOpenTwo  = dataOpenTwo;
        logCloseOne = dataCloseOne;
        logCloseTwo = dataCloseTwo;
    }

    # Open
    def startOne;
    def startTwo;
    if Quote == Quote.One and !Chart().isIntradayBar and !Chart().isMultiDay {
        startOne = logOpenOne;
        startTwo = logOpenTwo;
    }
    else {
        startOne = logCloseOne[1];
        startTwo = logCloseTwo[1];
    }

    # Close
    def endOne;
    def endTwo;
    if Quote == Quote.Two and Chart().isIntradayBar {
        endOne = logCloseOne[1];
        endTwo = logCloseTwo[1];
    }
    else if Quote == Quote.Two and !Chart().isMultiDay {
        endOne = logOpenOne;
        endTwo = logOpenTwo;
    }
    else {
        endOne = logCloseOne;
        endTwo = logCloseTwo;
    }

    # Tick
    def rawTickOne;
    def rawTickTwo;
    def rawTick;
    if Display == Display.Relative {
        rawTickOne = endOne / startOne - 1;
        rawTickTwo = endTwo / startTwo - 1;
        rawTick    = (endOne / startOne) / (endTwo / startTwo) - 1;
    }
    else {
        rawTickOne = endOne - startOne;
        rawTickTwo = endTwo - startTwo;
        rawTick    = rawTickOne - rawTickTwo;
    }

    # Cumulative
    def rawSumOne;
    def rawSumTwo;
    def rawSum;
    if isNewPeriod {
        rawSumOne = rawTickOne;
        rawSumTwo = rawTickTwo;
        rawSum    = rawTick;
    }
    else if Display == Display.Relative {
        rawSumOne = (rawSumOne[1] + 1) * (rawTickOne + 1) - 1;
        rawSumTwo = (rawSumTwo[1] + 1) * (rawTickTwo + 1) - 1;
        rawSum    = (rawSum[1] + 1) * (rawTick + 1) - 1;
    }
    else {
        rawSumOne = rawSumOne[1] + rawTickOne;
        rawSumTwo = rawSumTwo[1] + rawTickTwo;
        rawSum    = rawSum[1] + rawTick;
    }

    # Filters
    def sumOne;
    def sumTwo;
    def sum;
    def tick;
    if !Chart().isValidBar or !isActivePeriod {
        sumOne  = Double.NaN;
        sumTwo  = Double.NaN;
        sum     = Double.NaN;
        tick    = Double.NaN;
    }
    else {
        sumOne  = Filters(rawSumOne, Oscillation, Smoothing);
        sumTwo  = Filters(rawSumTwo, Oscillation, Smoothing);
        sum     = Filters(rawSum, Oscillation, Smoothing);
        tick    = Filters(rawTick, Oscillation, Smoothing);
    }
###


### PLOTS ###
    DefineGlobalColor("Line",       CreateColor(48, 48, 48));
    DefineGlobalColor("Separator",  CreateColor(32, 32, 32));
    DefineGlobalColor("Background", CreateColor(12, 12, 12));

    # Tick
    plot T = tick;
    T.SetHiding(Display != Display.Tick);
    T.SetPaintingStrategy(PaintingStrategy.HISTOGRAM);
    T.DefineColor("Up", Color.UPTICK);
    T.DefineColor("Down", Color.DOWNTICK);
    T.DefineColor("Neutral", Color.DARK_GRAY);
    T.SetDefaultColor(T.Color("Neutral"));
    T.AssignValueColor(
        if isNewPeriod and isActivePeriod[1]
            then GlobalColor("Background")
        else if tick > 0
            then T.Color("Up")
        else if tick < 0
            then T.Color("Down")
            else T.Color("Neutral")
    );

    # Cumulative
    plot S = sum;
    S.SetHiding(Display == Display.Tick or Mode != Mode.Combined);
    S.DefineColor("Up", Color.UPTICK);
    S.DefineColor("Down", Color.DOWNTICK);
    S.DefineColor("Neutral", Color.DARK_GRAY);
    S.SetDefaultColor(S.Color("Neutral"));
    S.AssignValueColor(
        if isNewPeriod and isActivePeriod[1]
            then GlobalColor("Background")
        else if sum > 0
            then S.Color("Up")
        else if sum < 0
            then S.Color("Down")
            else S.Color("Neutral")
    );

    # Cumulative One
    plot One = sumOne;
    One.SetHiding(Display == Display.Tick or Mode == Mode.Combined);
    One.DefineColor("Value", Color.UPTICK);
    One.SetDefaultColor(One.Color("Value"));
    One.AssignValueColor(
        if isNewPeriod and isActivePeriod[1]
            then GlobalColor("Background")
            else One.Color("Value")
    );

    # Cumulative Two
    plot Two = sumTwo;
    Two.SetHiding(Display == Display.Tick or Mode == Mode.Combined);
    Two.DefineColor("Value", Color.DOWNTICK);
    Two.SetDefaultColor(Two.Color("Value"));
    Two.AssignValueColor(
        if isNewPeriod and isActivePeriod[1]
            then GlobalColor("Background")
            else Two.Color("Value")
    );

    # Cloud
    def cloudOne = sumTwo;
    def cloudTwo = sumOne;
    AddCloud(
        data1 = if Mode == Mode.Cloud and Display != Display.Tick
            then cloudOne
            else Double.NaN,
        data2 = if Mode == Mode.Cloud and Display != Display.Tick
            then cloudTwo
            else Double.NaN,
        color1 = One.Color("Value"),
        color2 = Two.Color("Value")
    );

    # Line
    plot N = 0;
    N.SetDefaultColor(GlobalColor("Line"));
    N.HideBubble();
    N.HideTitle();
    N.Hide();

    # Separators
    AddVerticalLine(
        visible = Separators and isNewPeriod and isActivePeriod[1],
        color   = GlobalColor("Separator"),
        stroke  = Curve.SHORT_DASH,
        text    = ""
    );
###
